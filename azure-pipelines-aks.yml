# Set variables once
variables:
  cleanChekout: 'false'
  solutionType: angularDotNetCore # angularDotNetCore, dotNetCore
  apiDirectory: 'AdminWebsite/AdminWebsite'
  sonarCloudPrepareExtraProperties: |  
    sonar.exclusions=**/node_modules/**,**/*.spec.ts,*.spec.ts,**/ClientApp/src/*,**/ClientApp/coverage/**/*
    sonar.typescript.lcov.reportPaths=$(System.DefaultWorkingDirectory)/AdminWebsite/AdminWebsite/ClientApp/coverage/lcov.info
    sonar.typescript.exclusions=**/node_modules/**,**/typings.d.ts,**/main.ts,**/environments/environment*.ts,**/*routing.module.ts,**/api-client.ts
    sonar.cs.opencover.reportsPaths=$(Common.TestResultsDirectory)\Coverage\coverage.opencover.xml
    sonar.coverage.exclusions=**/Testing.Common/**,AdminWebsite/Views/*,AdminWebsite/Pages/*,AdminWebsite.UserAPI.Client/*,AdminWebsite.AcceptanceTests/*
  integrationTestsAppSettingsTransform: '
  "AzureAd/Authority":"https://login.microsoftonline.com/$(TenantId)",
  "AzureAd/ClientId":"$(vh-admin-web-appid)",
  "AzureAd/ClientSecret":"$(vh-admin-web-key)",
  "AzureAd:TenantId":"$(TenantId)",
  "VhServices/BookingsApiResourceId":"$(vh-bookings-api-identifieruris)",
  "VhServices/UserApiResourceId":"$(vh-user-api-identifieruris)"'
  
  vhAzureKeyVault: 'https://vhwebsitepreview.vault.azure.net/' # Used during integration tests
  keyVaultName: vhcoreinfrahtpreview # Used to get secrets for integration tests
  secretsFilter: 'TenantId,vh-admin-web-appid,vh-admin-web-key,vh-bookings-api-identifieruris,vh-user-api-identifieruris' # filters out secrets returned from key vault
  infraKeyVaultName: 'vhcoreinfradev'
  infraSecretsFilter: 'vh-core-infra-AppInsightsKey'
  imageName: 'vhinfrastructure.azurecr.io/vh-docker:$(Build.BuildId)'
  azureSubscriptionEndpoint: 'Reform-CFT-VH-Dev'
  azureContainerRegistry: 'vhinfrastructure.azurecr.io'
  helmVersion: '2.12.3'
  runtimeId: 'ubuntu.16.04-x64' # possible values linux-x64, win-x64, win10-x64


# GitHub Repo that conatins build templates. Reference https://docs.microsoft.com/en-us/azure/devops/pipelines/process/templates?view=vsts#using-other-repositories
resources:
  repositories:
  - repository: azureDevOpsTemplates
    type: github
    name: hmcts/azure-devops-templates
    ref: refs/heads/dotnet-core-build-rid # ref name to use, defaults to 'refs/heads/master'
    endpoint: 'GitHubDevOps'

stages:
- stage: Build
  jobs:
  - template: jobs/angularDotNetCore.yml@azureDevOpsTemplates # Template reference
    parameters:
        cleanCheckout: $(cleanCheckout)
        sonarCloudExtraProperties: $(sonarCloudPrepareExtraProperties)
        KeyVaultName: $(KeyVaultName)
        apiDirectory: $(apiDirectory)
        SecretsFilter: $(SecretsFilter)
        solutionType: $(solutionType)
        integrationTestsAppSettingsTransform: $(integrationTestsAppSettingsTransform)
        infraKeyVaultName: $(infraKeyVaultName)
        infraSecretsFilter: $(infraSecretsFilter)

  - job: BuildDotNetCoreProject
    workspace:
      clean: all
    displayName: .Net Core Project for $(runtimeId)
    pool: 'Azure-VSTS-VS2017'
    steps:
    # Runs common steps - gitVersion, Nuget  
    - template: templates/common/common.yml@azureDevOpsTemplates
    # build dotnet project
    - template: templates/dotnetRid/dotnetRidRestoreBuildPublish.yml@azureDevOpsTemplates # Template reference
      parameters:
          apiDirectory: $(apiDirectory)
          runtimeId: $(runtimeId)

    - task: PublishBuildArtifacts@1
      inputs:
        pathtoPublish: '$(Build.ArtifactStagingDirectory)'
        artifactName: dotentArtifacts

  - job: BuildDockerImage
    displayName: Docker Image
    dependsOn: BuildDotNetCoreProject
    pool:
      vmImage: ubuntu-16.04
    steps:

    - task: DownloadBuildArtifacts@0
      displayName: 'Download Build Artifacts'
      inputs:
        artifactName: 'dotentArtifacts'
        downloadPath: '$(Build.SourcesDirectory)'
        parallelizationLimit: 50

    - task: Docker@2
      displayName: build
      inputs:
        containerRegistry: 'vh-acr-dev'
        repository: '$(Build.Repository.Name)'
        command: build
        Dockerfile: Dockerfile
        arguments: '--build-arg $(BuildArguments)'
        tags: |
          $(Build.BuildId)
          latest

    - task: Docker@2
      displayName: push
      inputs:
        containerRegistry: 'vh-acr-dev'
        repository: '$(Build.Repository.Name)'
        command: push
        Dockerfile: Dockerfile
        tags: |
          $(Build.BuildId)
          latest

  - job: Deploy
    displayName: Deploy
    dependsOn: BuildDockerImage
    pool:
      vmImage: ubuntu-16.04
    steps:

    - task: DownloadSecureFile@1
      inputs:
        secureFile: 'vh_kube_dev_helm.key.pem'

    - task: DownloadSecureFile@1
      inputs:
        secureFile: 'vh_kube_dev_helm.cert.pem'

    - task: DownloadSecureFile@1
      inputs:
        secureFile: 'vh_kube_dev_ca.cert.pem'

    - task: HelmInstaller@0
      displayName: 'Install Helm $(helmVersion)'
      inputs: 
        helmVersion: $(helmVersion)
        checkLatestHelmVersion: false

    # - task: Kubernetes@1
    #   displayName: 'kubectl apply'
    #   inputs:
    #     kubernetesServiceEndpoint: 'vh-kub-dev'
    #     namespace: default
    #     command: apply
    #     useConfigurationFile: true
    #     configuration: secret.yaml
    #     arguments: '-f'
    #     secretType: generic
    #     secretArguments: '--from-literal=key1=value1 --from-literal=key2="top secret"'

    - task: HelmDeploy@0
      inputs:
        connectionType: 'Kubernetes Service Connection'
        kubernetesServiceEndpoint: 'a993ee82-40e5-4d87-a6f1-75f0a0458016'
        namespace: 'default'
        tillerNamespace: 'tiller'
        command: 'upgrade'
        chartName: 'vh-admin-web'
        enableTls: true
        caCert: 'vh_kube_dev_ca.cert.pem'
        certificate: 'vh_kube_dev_helm.cert.pem'
        privatekey: 'vh_kube_dev_helm.key.pem'
        waitForExecution: false
        releaseName: 'vh-admin-web'
        force: true
        recreate: true
