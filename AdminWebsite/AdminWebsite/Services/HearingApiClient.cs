//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v12.0.11.0 (NJsonSchema v9.13.13.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

namespace AdminWebsite.Services
{
    #pragma warning disable

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "12.0.11.0 (NJsonSchema v9.13.13.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial interface IHearingApiClient
    {
        /// <summary>Gets the pre-hearing check list of a hearing's participant.</summary>
        /// <param name="hearingId">Id of the hearing to pull a checklist for</param>
        /// <param name="participantId">Id of the participant</param>
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ParticipantChecklistResponse> GetChecklistForHearingParticipantAsync(long hearingId, long participantId);
    
        /// <summary>Gets the pre-hearing check list of a hearing's participant.</summary>
        /// <param name="hearingId">Id of the hearing to pull a checklist for</param>
        /// <param name="participantId">Id of the participant</param>
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        ParticipantChecklistResponse GetChecklistForHearingParticipant(long hearingId, long participantId);
    
        /// <summary>Gets the pre-hearing check list of a hearing's participant.</summary>
        /// <param name="hearingId">Id of the hearing to pull a checklist for</param>
        /// <param name="participantId">Id of the participant</param>
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<ParticipantChecklistResponse> GetChecklistForHearingParticipantAsync(long hearingId, long participantId, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Add the pre-hearing check list of a hearing's participant.</summary>
        /// <param name="hearingId">Id of the hearing the checklist is being submitted for</param>
        /// <param name="participantId">Id of the participant</param>
        /// <param name="request">Checklist to submit</param>
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task AddChecklistToHearingParticipantAsync(long hearingId, long participantId, AddPreHearingChecklistRequest request);
    
        /// <summary>Add the pre-hearing check list of a hearing's participant.</summary>
        /// <param name="hearingId">Id of the hearing the checklist is being submitted for</param>
        /// <param name="participantId">Id of the participant</param>
        /// <param name="request">Checklist to submit</param>
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        void AddChecklistToHearingParticipant(long hearingId, long participantId, AddPreHearingChecklistRequest request);
    
        /// <summary>Add the pre-hearing check list of a hearing's participant.</summary>
        /// <param name="hearingId">Id of the hearing the checklist is being submitted for</param>
        /// <param name="participantId">Id of the participant</param>
        /// <param name="request">Checklist to submit</param>
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task AddChecklistToHearingParticipantAsync(long hearingId, long participantId, AddPreHearingChecklistRequest request, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Gets list of all submitted participant checklists including participant and hearing details.
        /// Ordered by checklist submission date, most recent checklist first.</summary>
        /// <param name="pageSize">Maximum number of items to retrieve in the page, maximum allowed 1000.</param>
        /// <param name="page">One-based index of page to retrieve.</param>
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ChecklistsResponse> GetAllParticipantsChecklistsAsync(int? pageSize, int? page);
    
        /// <summary>Gets list of all submitted participant checklists including participant and hearing details.
        /// Ordered by checklist submission date, most recent checklist first.</summary>
        /// <param name="pageSize">Maximum number of items to retrieve in the page, maximum allowed 1000.</param>
        /// <param name="page">One-based index of page to retrieve.</param>
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        ChecklistsResponse GetAllParticipantsChecklists(int? pageSize, int? page);
    
        /// <summary>Gets list of all submitted participant checklists including participant and hearing details.
        /// Ordered by checklist submission date, most recent checklist first.</summary>
        /// <param name="pageSize">Maximum number of items to retrieve in the page, maximum allowed 1000.</param>
        /// <param name="page">One-based index of page to retrieve.</param>
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<ChecklistsResponse> GetAllParticipantsChecklistsAsync(int? pageSize, int? page, System.Threading.CancellationToken cancellationToken);
    
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ClearHearingConferenceDetailsAsync(long hearingId);
    
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        void ClearHearingConferenceDetails(long hearingId);
    
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task ClearHearingConferenceDetailsAsync(long hearingId, System.Threading.CancellationToken cancellationToken);
    
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task InitialiseHearingConferenceDetailsAsync(long hearingId, AddConferenceDetailsRequest request);
    
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        void InitialiseHearingConferenceDetails(long hearingId, AddConferenceDetailsRequest request);
    
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task InitialiseHearingConferenceDetailsAsync(long hearingId, AddConferenceDetailsRequest request, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Gets all participants for hearing</summary>
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.List<ParticipantResponse>> GetParticipantsInHearingAsync(long hearingId);
    
        /// <summary>Gets all participants for hearing</summary>
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        System.Collections.Generic.List<ParticipantResponse> GetParticipantsInHearing(long hearingId);
    
        /// <summary>Gets all participants for hearing</summary>
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<System.Collections.Generic.List<ParticipantResponse>> GetParticipantsInHearingAsync(long hearingId, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Add participant(s) to a hearing</summary>
        /// <param name="hearingId">the id of the hearing to ammend</param>
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task AddParticipantToHearingAsync(long hearingId, AddParticipantRequest request);
    
        /// <summary>Add participant(s) to a hearing</summary>
        /// <param name="hearingId">the id of the hearing to ammend</param>
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        void AddParticipantToHearing(long hearingId, AddParticipantRequest request);
    
        /// <summary>Add participant(s) to a hearing</summary>
        /// <param name="hearingId">the id of the hearing to ammend</param>
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task AddParticipantToHearingAsync(long hearingId, AddParticipantRequest request, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Gets the participant details by id</summary>
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ParticipantResponse> GetParticipantInHearingAsync(long hearingId, long participantId);
    
        /// <summary>Gets the participant details by id</summary>
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        ParticipantResponse GetParticipantInHearing(long hearingId, long participantId);
    
        /// <summary>Gets the participant details by id</summary>
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<ParticipantResponse> GetParticipantInHearingAsync(long hearingId, long participantId, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Update the details of the participants in a hearing</summary>
        /// <param name="hearingId">the id of the hearing</param>
        /// <param name="participantId">the id of the participant to ammend</param>
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ParticipantResponse> UpdateParticipantInHearingAsync(long hearingId, long participantId, UpdateHearingParticipantRequest request);
    
        /// <summary>Update the details of the participants in a hearing</summary>
        /// <param name="hearingId">the id of the hearing</param>
        /// <param name="participantId">the id of the participant to ammend</param>
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        ParticipantResponse UpdateParticipantInHearing(long hearingId, long participantId, UpdateHearingParticipantRequest request);
    
        /// <summary>Update the details of the participants in a hearing</summary>
        /// <param name="hearingId">the id of the hearing</param>
        /// <param name="participantId">the id of the participant to ammend</param>
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<ParticipantResponse> UpdateParticipantInHearingAsync(long hearingId, long participantId, UpdateHearingParticipantRequest request, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Remove a participant from a hearing</summary>
        /// <param name="hearingId">ID of hearing to ammend</param>
        /// <param name="participantId">ID of participant to remove</param>
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task RemoveParticipantFromHearingAsync(long hearingId, long participantId);
    
        /// <summary>Remove a participant from a hearing</summary>
        /// <param name="hearingId">ID of hearing to ammend</param>
        /// <param name="participantId">ID of participant to remove</param>
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        void RemoveParticipantFromHearing(long hearingId, long participantId);
    
        /// <summary>Remove a participant from a hearing</summary>
        /// <param name="hearingId">ID of hearing to ammend</param>
        /// <param name="participantId">ID of participant to remove</param>
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task RemoveParticipantFromHearingAsync(long hearingId, long participantId, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Gets the participant details by username</summary>
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ParticipantResponse> GetParticipantInHearingByUsernameAsync(long hearingId, string username);
    
        /// <summary>Gets the participant details by username</summary>
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        ParticipantResponse GetParticipantInHearingByUsername(long hearingId, string username);
    
        /// <summary>Gets the participant details by username</summary>
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<ParticipantResponse> GetParticipantInHearingByUsernameAsync(long hearingId, string username, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Gets a video hearing based on hearing id</summary>
        /// <param name="hearingId">Hearing id</param>
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<HearingResponse> GetHearingByIdAsync(long hearingId);
    
        /// <summary>Gets a video hearing based on hearing id</summary>
        /// <param name="hearingId">Hearing id</param>
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        HearingResponse GetHearingById(long hearingId);
    
        /// <summary>Gets a video hearing based on hearing id</summary>
        /// <param name="hearingId">Hearing id</param>
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<HearingResponse> GetHearingByIdAsync(long hearingId, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Update the details of a hearing</summary>
        /// <param name="hearingId">the id of the hearing</param>
        /// <param name="request">Hearing Request</param>
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task UpdateHearingDetailsAsync(long hearingId, UpdateHearingRequest request);
    
        /// <summary>Update the details of a hearing</summary>
        /// <param name="hearingId">the id of the hearing</param>
        /// <param name="request">Hearing Request</param>
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        void UpdateHearingDetails(long hearingId, UpdateHearingRequest request);
    
        /// <summary>Update the details of a hearing</summary>
        /// <param name="hearingId">the id of the hearing</param>
        /// <param name="request">Hearing Request</param>
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task UpdateHearingDetailsAsync(long hearingId, UpdateHearingRequest request, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Update hearing status</summary>
        /// <param name="hearingId">Id of the hearing to update the status for</param>
        /// <param name="updateHearingStatusRequest">Status of the hearing to change to</param>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task UpdateHearingStatusAsync(long hearingId, UpdateHearingStatusRequest updateHearingStatusRequest);
    
        /// <summary>Update hearing status</summary>
        /// <param name="hearingId">Id of the hearing to update the status for</param>
        /// <param name="updateHearingStatusRequest">Status of the hearing to change to</param>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        void UpdateHearingStatus(long hearingId, UpdateHearingStatusRequest updateHearingStatusRequest);
    
        /// <summary>Update hearing status</summary>
        /// <param name="hearingId">Id of the hearing to update the status for</param>
        /// <param name="updateHearingStatusRequest">Status of the hearing to change to</param>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task UpdateHearingStatusAsync(long hearingId, UpdateHearingStatusRequest updateHearingStatusRequest, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Run a health check of the service</summary>
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task CheckServiceHealthAsync();
    
        /// <summary>Run a health check of the service</summary>
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        void CheckServiceHealth();
    
        /// <summary>Run a health check of the service</summary>
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task CheckServiceHealthAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Gets list of hearings for a given date</summary>
        /// <param name="date">Date of hearing (yyyy-MM-dd)</param>
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.List<HearingResponse>> GetHearingsOnDateAsync(System.DateTime? date);
    
        /// <summary>Gets list of hearings for a given date</summary>
        /// <param name="date">Date of hearing (yyyy-MM-dd)</param>
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        System.Collections.Generic.List<HearingResponse> GetHearingsOnDate(System.DateTime? date);
    
        /// <summary>Gets list of hearings for a given date</summary>
        /// <param name="date">Date of hearing (yyyy-MM-dd)</param>
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<System.Collections.Generic.List<HearingResponse>> GetHearingsOnDateAsync(System.DateTime? date, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Create a hearing</summary>
        /// <param name="hearingRequest">Hearing Request object</param>
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<long> CreateHearingAsync(HearingRequest hearingRequest);
    
        /// <summary>Create a hearing</summary>
        /// <param name="hearingRequest">Hearing Request object</param>
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        long CreateHearing(HearingRequest hearingRequest);
    
        /// <summary>Create a hearing</summary>
        /// <param name="hearingRequest">Hearing Request object</param>
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<long> CreateHearingAsync(HearingRequest hearingRequest, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Get hearings within the specificied date range, inclusive</summary>
        /// <param name="fromDate">date to start from</param>
        /// <param name="toDate">date to end at</param>
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.List<HearingResponse>> GetHearingsBetweenDatesAsync(System.DateTime fromDate, System.DateTime toDate);
    
        /// <summary>Get hearings within the specificied date range, inclusive</summary>
        /// <param name="fromDate">date to start from</param>
        /// <param name="toDate">date to end at</param>
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        System.Collections.Generic.List<HearingResponse> GetHearingsBetweenDates(System.DateTime fromDate, System.DateTime toDate);
    
        /// <summary>Get hearings within the specificied date range, inclusive</summary>
        /// <param name="fromDate">date to start from</param>
        /// <param name="toDate">date to end at</param>
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<System.Collections.Generic.List<HearingResponse>> GetHearingsBetweenDatesAsync(System.DateTime fromDate, System.DateTime toDate, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Gets list of hearings for a given status</summary>
        /// <param name="status">The hearing status.</param>
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.List<HearingResponse>> GetHearingsByStatusAsync(string status);
    
        /// <summary>Gets list of hearings for a given status</summary>
        /// <param name="status">The hearing status.</param>
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        System.Collections.Generic.List<HearingResponse> GetHearingsByStatus(string status);
    
        /// <summary>Gets list of hearings for a given status</summary>
        /// <param name="status">The hearing status.</param>
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<System.Collections.Generic.List<HearingResponse>> GetHearingsByStatusAsync(string status, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Gets list of upcoming bookings hearing for a given case types</summary>
        /// <param name="types">The hearing case types.</param>
        /// <param name="cursor">Cursor specifying from which entries to read next page, is defaulted if not specified</param>
        /// <param name="limit">The max number hearings records to return.</param>
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BookingsResponse> GetHearingsByTypesAsync(System.Collections.Generic.IEnumerable<int> types, string cursor, int? limit);
    
        /// <summary>Gets list of upcoming bookings hearing for a given case types</summary>
        /// <param name="types">The hearing case types.</param>
        /// <param name="cursor">Cursor specifying from which entries to read next page, is defaulted if not specified</param>
        /// <param name="limit">The max number hearings records to return.</param>
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        BookingsResponse GetHearingsByTypes(System.Collections.Generic.IEnumerable<int> types, string cursor, int? limit);
    
        /// <summary>Gets list of upcoming bookings hearing for a given case types</summary>
        /// <param name="types">The hearing case types.</param>
        /// <param name="cursor">Cursor specifying from which entries to read next page, is defaulted if not specified</param>
        /// <param name="limit">The max number hearings records to return.</param>
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<BookingsResponse> GetHearingsByTypesAsync(System.Collections.Generic.IEnumerable<int> types, string cursor, int? limit, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Gets list of associated cases for a given hearing id</summary>
        /// <param name="hearingId">Hearing id</param>
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.List<CaseResponse>> GetCasesForHearingAsync(long hearingId);
    
        /// <summary>Gets list of associated cases for a given hearing id</summary>
        /// <param name="hearingId">Hearing id</param>
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        System.Collections.Generic.List<CaseResponse> GetCasesForHearing(long hearingId);
    
        /// <summary>Gets list of associated cases for a given hearing id</summary>
        /// <param name="hearingId">Hearing id</param>
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<System.Collections.Generic.List<CaseResponse>> GetCasesForHearingAsync(long hearingId, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>The hearing status</summary>
        /// <param name="hearingId">ID of hearing to get status of</param>
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response> GetHearingStatusAsync(long hearingId);
    
        /// <summary>The hearing status</summary>
        /// <param name="hearingId">ID of hearing to get status of</param>
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        Response GetHearingStatus(long hearingId);
    
        /// <summary>The hearing status</summary>
        /// <param name="hearingId">ID of hearing to get status of</param>
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<Response> GetHearingStatusAsync(long hearingId, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Update the notification to reflect new status</summary>
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ParticipantNotificationResponse> UpdateParticipantNotificationAsync(long hearingId, long participantId, UpdateParticipantNotificationRequest request);
    
        /// <summary>Update the notification to reflect new status</summary>
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        ParticipantNotificationResponse UpdateParticipantNotification(long hearingId, long participantId, UpdateParticipantNotificationRequest request);
    
        /// <summary>Update the notification to reflect new status</summary>
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<ParticipantNotificationResponse> UpdateParticipantNotificationAsync(long hearingId, long participantId, UpdateParticipantNotificationRequest request, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Adds a new notification to the hearing participant</summary>
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ParticipantNotificationResponse> AddParticipantNotificationAsync(long hearingId, long participantId, CreateParticipantNotificationRequest request);
    
        /// <summary>Adds a new notification to the hearing participant</summary>
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        ParticipantNotificationResponse AddParticipantNotification(long hearingId, long participantId, CreateParticipantNotificationRequest request);
    
        /// <summary>Adds a new notification to the hearing participant</summary>
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<ParticipantNotificationResponse> AddParticipantNotificationAsync(long hearingId, long participantId, CreateParticipantNotificationRequest request, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Gets the participant details by username in an active hearing</summary>
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ParticipantResponse> GetHearingParticipantByUsernameAsync(string username);
    
        /// <summary>Gets the participant details by username in an active hearing</summary>
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        ParticipantResponse GetHearingParticipantByUsername(string username);
    
        /// <summary>Gets the participant details by username in an active hearing</summary>
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<ParticipantResponse> GetHearingParticipantByUsernameAsync(string username, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Get a participant details by email</summary>
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ParticipantResponse> GetParticipantByEmailAsync(string email);
    
        /// <summary>Get a participant details by email</summary>
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        ParticipantResponse GetParticipantByEmail(string email);
    
        /// <summary>Get a participant details by email</summary>
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<ParticipantResponse> GetParticipantByEmailAsync(string email, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Gets any submitted checklist the participant has completed</summary>
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ChecklistRequiredResponse> GetHearingParticipantChecklistByUsernameAsync(string username);
    
        /// <summary>Gets any submitted checklist the participant has completed</summary>
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        ChecklistRequiredResponse GetHearingParticipantChecklistByUsername(string username);
    
        /// <summary>Gets any submitted checklist the participant has completed</summary>
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<ChecklistRequiredResponse> GetHearingParticipantChecklistByUsernameAsync(string username, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Gets the participant current status</summary>
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ParticipantStatusResponse> GetCurrentStatusForHearingParticipantAsync(long hearingId, long participantId);
    
        /// <summary>Gets the participant current status</summary>
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        ParticipantStatusResponse GetCurrentStatusForHearingParticipant(long hearingId, long participantId);
    
        /// <summary>Gets the participant current status</summary>
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<ParticipantStatusResponse> GetCurrentStatusForHearingParticipantAsync(long hearingId, long participantId, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Gets the participant's status history for a given hearing</summary>
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ParticipantStatusResponse> GetHearingParticipantStatusHistoryAsync(long hearingId, long participantId);
    
        /// <summary>Gets the participant's status history for a given hearing</summary>
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        ParticipantStatusResponse GetHearingParticipantStatusHistory(long hearingId, long participantId);
    
        /// <summary>Gets the participant's status history for a given hearing</summary>
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<ParticipantStatusResponse> GetHearingParticipantStatusHistoryAsync(long hearingId, long participantId, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Create a participant status.</summary>
        /// <param name="hearingId">The hearing Id.</param>
        /// <param name="participantId">The participant Id.</param>
        /// <param name="participantStatusRequest">The participant status request object.</param>
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task UpdateHearingParticipantStatusAsync(long hearingId, long participantId, ParticipantStatusRequest participantStatusRequest);
    
        /// <summary>Create a participant status.</summary>
        /// <param name="hearingId">The hearing Id.</param>
        /// <param name="participantId">The participant Id.</param>
        /// <param name="participantStatusRequest">The participant status request object.</param>
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        void UpdateHearingParticipantStatus(long hearingId, long participantId, ParticipantStatusRequest participantStatusRequest);
    
        /// <summary>Create a participant status.</summary>
        /// <param name="hearingId">The hearing Id.</param>
        /// <param name="participantId">The participant Id.</param>
        /// <param name="participantStatusRequest">The participant status request object.</param>
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task UpdateHearingParticipantStatusAsync(long hearingId, long participantId, ParticipantStatusRequest participantStatusRequest, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Gets a list hearing types</summary>
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.List<HearingTypeResponse>> GetHearingTypesAsync();
    
        /// <summary>Gets a list hearing types</summary>
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        System.Collections.Generic.List<HearingTypeResponse> GetHearingTypes();
    
        /// <summary>Gets a list hearing types</summary>
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<System.Collections.Generic.List<HearingTypeResponse>> GetHearingTypesAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Gets a list of hearing mediums</summary>
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.List<HearingMediumResponse>> GetHearingsMediumsAsync();
    
        /// <summary>Gets a list of hearing mediums</summary>
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        System.Collections.Generic.List<HearingMediumResponse> GetHearingsMediums();
    
        /// <summary>Gets a list of hearing mediums</summary>
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<System.Collections.Generic.List<HearingMediumResponse>> GetHearingsMediumsAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Gets a hearing status types</summary>
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.List<HearingStatusTypeResponse>> GetHearingStatusTypesAsync();
    
        /// <summary>Gets a hearing status types</summary>
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        System.Collections.Generic.List<HearingStatusTypeResponse> GetHearingStatusTypes();
    
        /// <summary>Gets a hearing status types</summary>
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<System.Collections.Generic.List<HearingStatusTypeResponse>> GetHearingStatusTypesAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Get available participant roles</summary>
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.List<ParticipantRoleResponse>> GetParticipantRolesAsync();
    
        /// <summary>Get available participant roles</summary>
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        System.Collections.Generic.List<ParticipantRoleResponse> GetParticipantRoles();
    
        /// <summary>Get available participant roles</summary>
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<System.Collections.Generic.List<ParticipantRoleResponse>> GetParticipantRolesAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Get available courts</summary>
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.List<CourtResponse>> GetCourtsAsync();
    
        /// <summary>Get available courts</summary>
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        System.Collections.Generic.List<CourtResponse> GetCourts();
    
        /// <summary>Get available courts</summary>
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<System.Collections.Generic.List<CourtResponse>> GetCourtsAsync(System.Threading.CancellationToken cancellationToken);
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "12.0.11.0 (NJsonSchema v9.13.13.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class HearingApiClient : IHearingApiClient
    {
        private string _baseUrl = "http://localhost:5000";
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;
    
        public HearingApiClient(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient; 
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() => 
            {
                var settings = new Newtonsoft.Json.JsonSerializerSettings();
                UpdateJsonSerializerSettings(settings);
                return settings;
            });
        }
    
        public string BaseUrl 
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }
    
        public Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }
    
        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
    
        /// <summary>Gets the pre-hearing check list of a hearing's participant.</summary>
        /// <param name="hearingId">Id of the hearing to pull a checklist for</param>
        /// <param name="participantId">Id of the participant</param>
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ParticipantChecklistResponse> GetChecklistForHearingParticipantAsync(long hearingId, long participantId)
        {
            return GetChecklistForHearingParticipantAsync(hearingId, participantId, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Gets the pre-hearing check list of a hearing's participant.</summary>
        /// <param name="hearingId">Id of the hearing to pull a checklist for</param>
        /// <param name="participantId">Id of the participant</param>
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        public ParticipantChecklistResponse GetChecklistForHearingParticipant(long hearingId, long participantId)
        {
            return System.Threading.Tasks.Task.Run(async () => await GetChecklistForHearingParticipantAsync(hearingId, participantId, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <summary>Gets the pre-hearing check list of a hearing's participant.</summary>
        /// <param name="hearingId">Id of the hearing to pull a checklist for</param>
        /// <param name="participantId">Id of the participant</param>
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<ParticipantChecklistResponse> GetChecklistForHearingParticipantAsync(long hearingId, long participantId, System.Threading.CancellationToken cancellationToken)
        {
            if (hearingId == null)
                throw new System.ArgumentNullException("hearingId");
    
            if (participantId == null)
                throw new System.ArgumentNullException("participantId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/hearings/{hearingId}/participants/{participantId}/checklist");
            urlBuilder_.Replace("{hearingId}", System.Uri.EscapeDataString(ConvertToString(hearingId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{participantId}", System.Uri.EscapeDataString(ConvertToString(participantId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ParticipantChecklistResponse); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ParticipantChecklistResponse>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new HearingApiException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "404") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new HearingApiException("Not Found", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ == "400") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new HearingApiException("Bad Request", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new HearingApiException("Unauthorized", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new HearingApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(ParticipantChecklistResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Add the pre-hearing check list of a hearing's participant.</summary>
        /// <param name="hearingId">Id of the hearing the checklist is being submitted for</param>
        /// <param name="participantId">Id of the participant</param>
        /// <param name="request">Checklist to submit</param>
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task AddChecklistToHearingParticipantAsync(long hearingId, long participantId, AddPreHearingChecklistRequest request)
        {
            return AddChecklistToHearingParticipantAsync(hearingId, participantId, request, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Add the pre-hearing check list of a hearing's participant.</summary>
        /// <param name="hearingId">Id of the hearing the checklist is being submitted for</param>
        /// <param name="participantId">Id of the participant</param>
        /// <param name="request">Checklist to submit</param>
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        public void AddChecklistToHearingParticipant(long hearingId, long participantId, AddPreHearingChecklistRequest request)
        {
            System.Threading.Tasks.Task.Run(async () => await AddChecklistToHearingParticipantAsync(hearingId, participantId, request, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <summary>Add the pre-hearing check list of a hearing's participant.</summary>
        /// <param name="hearingId">Id of the hearing the checklist is being submitted for</param>
        /// <param name="participantId">Id of the participant</param>
        /// <param name="request">Checklist to submit</param>
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task AddChecklistToHearingParticipantAsync(long hearingId, long participantId, AddPreHearingChecklistRequest request, System.Threading.CancellationToken cancellationToken)
        {
            if (hearingId == null)
                throw new System.ArgumentNullException("hearingId");
    
            if (participantId == null)
                throw new System.ArgumentNullException("participantId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/hearings/{hearingId}/participants/{participantId}/checklist");
            urlBuilder_.Replace("{hearingId}", System.Uri.EscapeDataString(ConvertToString(hearingId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{participantId}", System.Uri.EscapeDataString(ConvertToString(participantId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(request, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "201") 
                        {
                            return;
                        }
                        else
                        if (status_ == "404") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new HearingApiException("Not Found", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ == "400") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new HearingApiException("Bad Request", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new HearingApiException("Unauthorized", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new HearingApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Gets list of all submitted participant checklists including participant and hearing details.
        /// Ordered by checklist submission date, most recent checklist first.</summary>
        /// <param name="pageSize">Maximum number of items to retrieve in the page, maximum allowed 1000.</param>
        /// <param name="page">One-based index of page to retrieve.</param>
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ChecklistsResponse> GetAllParticipantsChecklistsAsync(int? pageSize, int? page)
        {
            return GetAllParticipantsChecklistsAsync(pageSize, page, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Gets list of all submitted participant checklists including participant and hearing details.
        /// Ordered by checklist submission date, most recent checklist first.</summary>
        /// <param name="pageSize">Maximum number of items to retrieve in the page, maximum allowed 1000.</param>
        /// <param name="page">One-based index of page to retrieve.</param>
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        public ChecklistsResponse GetAllParticipantsChecklists(int? pageSize, int? page)
        {
            return System.Threading.Tasks.Task.Run(async () => await GetAllParticipantsChecklistsAsync(pageSize, page, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <summary>Gets list of all submitted participant checklists including participant and hearing details.
        /// Ordered by checklist submission date, most recent checklist first.</summary>
        /// <param name="pageSize">Maximum number of items to retrieve in the page, maximum allowed 1000.</param>
        /// <param name="page">One-based index of page to retrieve.</param>
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<ChecklistsResponse> GetAllParticipantsChecklistsAsync(int? pageSize, int? page, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/hearings/participants/checklists?");
            if (pageSize != null) 
            {
                urlBuilder_.Append("pageSize=").Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page != null) 
            {
                urlBuilder_.Append("page=").Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ChecklistsResponse); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ChecklistsResponse>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new HearingApiException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "404") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new HearingApiException("Not Found", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ == "400") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new HearingApiException("Bad Request", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new HearingApiException("Unauthorized", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new HearingApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(ChecklistsResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task ClearHearingConferenceDetailsAsync(long hearingId)
        {
            return ClearHearingConferenceDetailsAsync(hearingId, System.Threading.CancellationToken.None);
        }
    
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        public void ClearHearingConferenceDetails(long hearingId)
        {
            System.Threading.Tasks.Task.Run(async () => await ClearHearingConferenceDetailsAsync(hearingId, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task ClearHearingConferenceDetailsAsync(long hearingId, System.Threading.CancellationToken cancellationToken)
        {
            if (hearingId == null)
                throw new System.ArgumentNullException("hearingId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/Hearings/{hearingId}/conference");
            urlBuilder_.Replace("{hearingId}", System.Uri.EscapeDataString(ConvertToString(hearingId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            return;
                        }
                        else
                        if (status_ == "400") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new HearingApiException("Bad Request", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new HearingApiException("Unauthorized", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new HearingApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task InitialiseHearingConferenceDetailsAsync(long hearingId, AddConferenceDetailsRequest request)
        {
            return InitialiseHearingConferenceDetailsAsync(hearingId, request, System.Threading.CancellationToken.None);
        }
    
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        public void InitialiseHearingConferenceDetails(long hearingId, AddConferenceDetailsRequest request)
        {
            System.Threading.Tasks.Task.Run(async () => await InitialiseHearingConferenceDetailsAsync(hearingId, request, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task InitialiseHearingConferenceDetailsAsync(long hearingId, AddConferenceDetailsRequest request, System.Threading.CancellationToken cancellationToken)
        {
            if (hearingId == null)
                throw new System.ArgumentNullException("hearingId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/Hearings/{hearingId}/conference");
            urlBuilder_.Replace("{hearingId}", System.Uri.EscapeDataString(ConvertToString(hearingId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(request, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            return;
                        }
                        else
                        if (status_ == "400") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new HearingApiException("Bad Request", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new HearingApiException("Unauthorized", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new HearingApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Gets all participants for hearing</summary>
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.List<ParticipantResponse>> GetParticipantsInHearingAsync(long hearingId)
        {
            return GetParticipantsInHearingAsync(hearingId, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Gets all participants for hearing</summary>
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        public System.Collections.Generic.List<ParticipantResponse> GetParticipantsInHearing(long hearingId)
        {
            return System.Threading.Tasks.Task.Run(async () => await GetParticipantsInHearingAsync(hearingId, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <summary>Gets all participants for hearing</summary>
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<System.Collections.Generic.List<ParticipantResponse>> GetParticipantsInHearingAsync(long hearingId, System.Threading.CancellationToken cancellationToken)
        {
            if (hearingId == null)
                throw new System.ArgumentNullException("hearingId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/Hearings/{hearingId}/participants");
            urlBuilder_.Replace("{hearingId}", System.Uri.EscapeDataString(ConvertToString(hearingId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.Generic.List<ParticipantResponse>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.Generic.List<ParticipantResponse>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new HearingApiException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "400") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new HearingApiException("Bad Request", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new HearingApiException("Not Found", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new HearingApiException("Unauthorized", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new HearingApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.Generic.List<ParticipantResponse>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Add participant(s) to a hearing</summary>
        /// <param name="hearingId">the id of the hearing to ammend</param>
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task AddParticipantToHearingAsync(long hearingId, AddParticipantRequest request)
        {
            return AddParticipantToHearingAsync(hearingId, request, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Add participant(s) to a hearing</summary>
        /// <param name="hearingId">the id of the hearing to ammend</param>
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        public void AddParticipantToHearing(long hearingId, AddParticipantRequest request)
        {
            System.Threading.Tasks.Task.Run(async () => await AddParticipantToHearingAsync(hearingId, request, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <summary>Add participant(s) to a hearing</summary>
        /// <param name="hearingId">the id of the hearing to ammend</param>
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task AddParticipantToHearingAsync(long hearingId, AddParticipantRequest request, System.Threading.CancellationToken cancellationToken)
        {
            if (hearingId == null)
                throw new System.ArgumentNullException("hearingId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/Hearings/{hearingId}/participants");
            urlBuilder_.Replace("{hearingId}", System.Uri.EscapeDataString(ConvertToString(hearingId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(request, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "201") 
                        {
                            return;
                        }
                        else
                        if (status_ == "400") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new HearingApiException("Bad Request", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new HearingApiException("Unauthorized", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new HearingApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Gets the participant details by id</summary>
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ParticipantResponse> GetParticipantInHearingAsync(long hearingId, long participantId)
        {
            return GetParticipantInHearingAsync(hearingId, participantId, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Gets the participant details by id</summary>
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        public ParticipantResponse GetParticipantInHearing(long hearingId, long participantId)
        {
            return System.Threading.Tasks.Task.Run(async () => await GetParticipantInHearingAsync(hearingId, participantId, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <summary>Gets the participant details by id</summary>
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<ParticipantResponse> GetParticipantInHearingAsync(long hearingId, long participantId, System.Threading.CancellationToken cancellationToken)
        {
            if (hearingId == null)
                throw new System.ArgumentNullException("hearingId");
    
            if (participantId == null)
                throw new System.ArgumentNullException("participantId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/Hearings/{hearingId}/participants/{participantId}");
            urlBuilder_.Replace("{hearingId}", System.Uri.EscapeDataString(ConvertToString(hearingId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{participantId}", System.Uri.EscapeDataString(ConvertToString(participantId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ParticipantResponse); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ParticipantResponse>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new HearingApiException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "400") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new HearingApiException("Bad Request", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new HearingApiException("Not Found", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new HearingApiException("Unauthorized", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new HearingApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(ParticipantResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Update the details of the participants in a hearing</summary>
        /// <param name="hearingId">the id of the hearing</param>
        /// <param name="participantId">the id of the participant to ammend</param>
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ParticipantResponse> UpdateParticipantInHearingAsync(long hearingId, long participantId, UpdateHearingParticipantRequest request)
        {
            return UpdateParticipantInHearingAsync(hearingId, participantId, request, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Update the details of the participants in a hearing</summary>
        /// <param name="hearingId">the id of the hearing</param>
        /// <param name="participantId">the id of the participant to ammend</param>
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        public ParticipantResponse UpdateParticipantInHearing(long hearingId, long participantId, UpdateHearingParticipantRequest request)
        {
            return System.Threading.Tasks.Task.Run(async () => await UpdateParticipantInHearingAsync(hearingId, participantId, request, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <summary>Update the details of the participants in a hearing</summary>
        /// <param name="hearingId">the id of the hearing</param>
        /// <param name="participantId">the id of the participant to ammend</param>
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<ParticipantResponse> UpdateParticipantInHearingAsync(long hearingId, long participantId, UpdateHearingParticipantRequest request, System.Threading.CancellationToken cancellationToken)
        {
            if (hearingId == null)
                throw new System.ArgumentNullException("hearingId");
    
            if (participantId == null)
                throw new System.ArgumentNullException("participantId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/Hearings/{hearingId}/participant/{participantId}");
            urlBuilder_.Replace("{hearingId}", System.Uri.EscapeDataString(ConvertToString(hearingId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{participantId}", System.Uri.EscapeDataString(ConvertToString(participantId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(request, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ParticipantResponse); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ParticipantResponse>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new HearingApiException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "400") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new HearingApiException("Bad Request", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new HearingApiException("Unauthorized", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new HearingApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(ParticipantResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Remove a participant from a hearing</summary>
        /// <param name="hearingId">ID of hearing to ammend</param>
        /// <param name="participantId">ID of participant to remove</param>
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task RemoveParticipantFromHearingAsync(long hearingId, long participantId)
        {
            return RemoveParticipantFromHearingAsync(hearingId, participantId, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Remove a participant from a hearing</summary>
        /// <param name="hearingId">ID of hearing to ammend</param>
        /// <param name="participantId">ID of participant to remove</param>
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        public void RemoveParticipantFromHearing(long hearingId, long participantId)
        {
            System.Threading.Tasks.Task.Run(async () => await RemoveParticipantFromHearingAsync(hearingId, participantId, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <summary>Remove a participant from a hearing</summary>
        /// <param name="hearingId">ID of hearing to ammend</param>
        /// <param name="participantId">ID of participant to remove</param>
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task RemoveParticipantFromHearingAsync(long hearingId, long participantId, System.Threading.CancellationToken cancellationToken)
        {
            if (hearingId == null)
                throw new System.ArgumentNullException("hearingId");
    
            if (participantId == null)
                throw new System.ArgumentNullException("participantId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/Hearings/{hearingId}/participant/{participantId}");
            urlBuilder_.Replace("{hearingId}", System.Uri.EscapeDataString(ConvertToString(hearingId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{participantId}", System.Uri.EscapeDataString(ConvertToString(participantId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "201") 
                        {
                            return;
                        }
                        else
                        if (status_ == "400") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new HearingApiException("Bad Request", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new HearingApiException("Unauthorized", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new HearingApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Gets the participant details by username</summary>
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ParticipantResponse> GetParticipantInHearingByUsernameAsync(long hearingId, string username)
        {
            return GetParticipantInHearingByUsernameAsync(hearingId, username, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Gets the participant details by username</summary>
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        public ParticipantResponse GetParticipantInHearingByUsername(long hearingId, string username)
        {
            return System.Threading.Tasks.Task.Run(async () => await GetParticipantInHearingByUsernameAsync(hearingId, username, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <summary>Gets the participant details by username</summary>
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<ParticipantResponse> GetParticipantInHearingByUsernameAsync(long hearingId, string username, System.Threading.CancellationToken cancellationToken)
        {
            if (hearingId == null)
                throw new System.ArgumentNullException("hearingId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/Hearings/{hearingId}/participant?");
            urlBuilder_.Replace("{hearingId}", System.Uri.EscapeDataString(ConvertToString(hearingId, System.Globalization.CultureInfo.InvariantCulture)));
            if (username != null) 
            {
                urlBuilder_.Append("username=").Append(System.Uri.EscapeDataString(ConvertToString(username, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ParticipantResponse); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ParticipantResponse>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new HearingApiException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "400") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new HearingApiException("Bad Request", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new HearingApiException("Not Found", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new HearingApiException("Unauthorized", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new HearingApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(ParticipantResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Gets a video hearing based on hearing id</summary>
        /// <param name="hearingId">Hearing id</param>
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<HearingResponse> GetHearingByIdAsync(long hearingId)
        {
            return GetHearingByIdAsync(hearingId, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Gets a video hearing based on hearing id</summary>
        /// <param name="hearingId">Hearing id</param>
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        public HearingResponse GetHearingById(long hearingId)
        {
            return System.Threading.Tasks.Task.Run(async () => await GetHearingByIdAsync(hearingId, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <summary>Gets a video hearing based on hearing id</summary>
        /// <param name="hearingId">Hearing id</param>
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<HearingResponse> GetHearingByIdAsync(long hearingId, System.Threading.CancellationToken cancellationToken)
        {
            if (hearingId == null)
                throw new System.ArgumentNullException("hearingId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/Hearings/{hearingId}");
            urlBuilder_.Replace("{hearingId}", System.Uri.EscapeDataString(ConvertToString(hearingId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(HearingResponse); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<HearingResponse>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new HearingApiException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "400") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new HearingApiException("Bad Request", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new HearingApiException("Not Found", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new HearingApiException("Unauthorized", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new HearingApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(HearingResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Update the details of a hearing</summary>
        /// <param name="hearingId">the id of the hearing</param>
        /// <param name="request">Hearing Request</param>
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task UpdateHearingDetailsAsync(long hearingId, UpdateHearingRequest request)
        {
            return UpdateHearingDetailsAsync(hearingId, request, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Update the details of a hearing</summary>
        /// <param name="hearingId">the id of the hearing</param>
        /// <param name="request">Hearing Request</param>
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        public void UpdateHearingDetails(long hearingId, UpdateHearingRequest request)
        {
            System.Threading.Tasks.Task.Run(async () => await UpdateHearingDetailsAsync(hearingId, request, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <summary>Update the details of a hearing</summary>
        /// <param name="hearingId">the id of the hearing</param>
        /// <param name="request">Hearing Request</param>
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task UpdateHearingDetailsAsync(long hearingId, UpdateHearingRequest request, System.Threading.CancellationToken cancellationToken)
        {
            if (hearingId == null)
                throw new System.ArgumentNullException("hearingId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/Hearings/{hearingId}");
            urlBuilder_.Replace("{hearingId}", System.Uri.EscapeDataString(ConvertToString(hearingId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(request, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            return;
                        }
                        else
                        if (status_ == "400") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new HearingApiException("Bad Request", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new HearingApiException("Unauthorized", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new HearingApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Update hearing status</summary>
        /// <param name="hearingId">Id of the hearing to update the status for</param>
        /// <param name="updateHearingStatusRequest">Status of the hearing to change to</param>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task UpdateHearingStatusAsync(long hearingId, UpdateHearingStatusRequest updateHearingStatusRequest)
        {
            return UpdateHearingStatusAsync(hearingId, updateHearingStatusRequest, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Update hearing status</summary>
        /// <param name="hearingId">Id of the hearing to update the status for</param>
        /// <param name="updateHearingStatusRequest">Status of the hearing to change to</param>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        public void UpdateHearingStatus(long hearingId, UpdateHearingStatusRequest updateHearingStatusRequest)
        {
            System.Threading.Tasks.Task.Run(async () => await UpdateHearingStatusAsync(hearingId, updateHearingStatusRequest, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <summary>Update hearing status</summary>
        /// <param name="hearingId">Id of the hearing to update the status for</param>
        /// <param name="updateHearingStatusRequest">Status of the hearing to change to</param>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task UpdateHearingStatusAsync(long hearingId, UpdateHearingStatusRequest updateHearingStatusRequest, System.Threading.CancellationToken cancellationToken)
        {
            if (hearingId == null)
                throw new System.ArgumentNullException("hearingId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/Hearings/{hearingId}");
            urlBuilder_.Replace("{hearingId}", System.Uri.EscapeDataString(ConvertToString(hearingId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(updateHearingStatusRequest, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new HearingApiException("Bad Request", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new HearingApiException("Unauthorized", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new HearingApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Run a health check of the service</summary>
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task CheckServiceHealthAsync()
        {
            return CheckServiceHealthAsync(System.Threading.CancellationToken.None);
        }
    
        /// <summary>Run a health check of the service</summary>
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        public void CheckServiceHealth()
        {
            System.Threading.Tasks.Task.Run(async () => await CheckServiceHealthAsync(System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <summary>Run a health check of the service</summary>
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task CheckServiceHealthAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/Hearings/health");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            return;
                        }
                        else
                        if (status_ == "500") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new HearingApiException("Server Error", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new HearingApiException("Unauthorized", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new HearingApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Gets list of hearings for a given date</summary>
        /// <param name="date">Date of hearing (yyyy-MM-dd)</param>
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.List<HearingResponse>> GetHearingsOnDateAsync(System.DateTime? date)
        {
            return GetHearingsOnDateAsync(date, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Gets list of hearings for a given date</summary>
        /// <param name="date">Date of hearing (yyyy-MM-dd)</param>
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        public System.Collections.Generic.List<HearingResponse> GetHearingsOnDate(System.DateTime? date)
        {
            return System.Threading.Tasks.Task.Run(async () => await GetHearingsOnDateAsync(date, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <summary>Gets list of hearings for a given date</summary>
        /// <param name="date">Date of hearing (yyyy-MM-dd)</param>
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<System.Collections.Generic.List<HearingResponse>> GetHearingsOnDateAsync(System.DateTime? date, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/Hearings?");
            if (date != null) 
            {
                urlBuilder_.Append("date=").Append(System.Uri.EscapeDataString(date.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.Generic.List<HearingResponse>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.Generic.List<HearingResponse>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new HearingApiException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "400") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new HearingApiException("Bad Request", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new HearingApiException("Not Found", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new HearingApiException("Unauthorized", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new HearingApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.Generic.List<HearingResponse>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Create a hearing</summary>
        /// <param name="hearingRequest">Hearing Request object</param>
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<long> CreateHearingAsync(HearingRequest hearingRequest)
        {
            return CreateHearingAsync(hearingRequest, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Create a hearing</summary>
        /// <param name="hearingRequest">Hearing Request object</param>
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        public long CreateHearing(HearingRequest hearingRequest)
        {
            return System.Threading.Tasks.Task.Run(async () => await CreateHearingAsync(hearingRequest, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <summary>Create a hearing</summary>
        /// <param name="hearingRequest">Hearing Request object</param>
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<long> CreateHearingAsync(HearingRequest hearingRequest, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/Hearings");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(hearingRequest, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "201") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(long); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<long>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new HearingApiException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "400") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new HearingApiException("Bad Request", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new HearingApiException("Unauthorized", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new HearingApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(long);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Get hearings within the specificied date range, inclusive</summary>
        /// <param name="fromDate">date to start from</param>
        /// <param name="toDate">date to end at</param>
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.List<HearingResponse>> GetHearingsBetweenDatesAsync(System.DateTime fromDate, System.DateTime toDate)
        {
            return GetHearingsBetweenDatesAsync(fromDate, toDate, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Get hearings within the specificied date range, inclusive</summary>
        /// <param name="fromDate">date to start from</param>
        /// <param name="toDate">date to end at</param>
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        public System.Collections.Generic.List<HearingResponse> GetHearingsBetweenDates(System.DateTime fromDate, System.DateTime toDate)
        {
            return System.Threading.Tasks.Task.Run(async () => await GetHearingsBetweenDatesAsync(fromDate, toDate, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <summary>Get hearings within the specificied date range, inclusive</summary>
        /// <param name="fromDate">date to start from</param>
        /// <param name="toDate">date to end at</param>
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<System.Collections.Generic.List<HearingResponse>> GetHearingsBetweenDatesAsync(System.DateTime fromDate, System.DateTime toDate, System.Threading.CancellationToken cancellationToken)
        {
            if (fromDate == null)
                throw new System.ArgumentNullException("fromDate");
    
            if (toDate == null)
                throw new System.ArgumentNullException("toDate");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/Hearings/from/{fromDate}/to/{toDate}");
            urlBuilder_.Replace("{fromDate}", System.Uri.EscapeDataString(fromDate.ToString("s", System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{toDate}", System.Uri.EscapeDataString(toDate.ToString("s", System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.Generic.List<HearingResponse>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.Generic.List<HearingResponse>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new HearingApiException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "400") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new HearingApiException("Bad Request", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new HearingApiException("Not Found", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new HearingApiException("Unauthorized", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new HearingApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.Generic.List<HearingResponse>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Gets list of hearings for a given status</summary>
        /// <param name="status">The hearing status.</param>
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.List<HearingResponse>> GetHearingsByStatusAsync(string status)
        {
            return GetHearingsByStatusAsync(status, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Gets list of hearings for a given status</summary>
        /// <param name="status">The hearing status.</param>
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        public System.Collections.Generic.List<HearingResponse> GetHearingsByStatus(string status)
        {
            return System.Threading.Tasks.Task.Run(async () => await GetHearingsByStatusAsync(status, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <summary>Gets list of hearings for a given status</summary>
        /// <param name="status">The hearing status.</param>
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<System.Collections.Generic.List<HearingResponse>> GetHearingsByStatusAsync(string status, System.Threading.CancellationToken cancellationToken)
        {
            if (status == null)
                throw new System.ArgumentNullException("status");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/Hearings/status/{status}");
            urlBuilder_.Replace("{status}", System.Uri.EscapeDataString(ConvertToString(status, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.Generic.List<HearingResponse>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.Generic.List<HearingResponse>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new HearingApiException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "400") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new HearingApiException("Bad Request", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new HearingApiException("Not Found", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new HearingApiException("Unauthorized", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new HearingApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.Generic.List<HearingResponse>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Gets list of upcoming bookings hearing for a given case types</summary>
        /// <param name="types">The hearing case types.</param>
        /// <param name="cursor">Cursor specifying from which entries to read next page, is defaulted if not specified</param>
        /// <param name="limit">The max number hearings records to return.</param>
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<BookingsResponse> GetHearingsByTypesAsync(System.Collections.Generic.IEnumerable<int> types, string cursor, int? limit)
        {
            return GetHearingsByTypesAsync(types, cursor, limit, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Gets list of upcoming bookings hearing for a given case types</summary>
        /// <param name="types">The hearing case types.</param>
        /// <param name="cursor">Cursor specifying from which entries to read next page, is defaulted if not specified</param>
        /// <param name="limit">The max number hearings records to return.</param>
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        public BookingsResponse GetHearingsByTypes(System.Collections.Generic.IEnumerable<int> types, string cursor, int? limit)
        {
            return System.Threading.Tasks.Task.Run(async () => await GetHearingsByTypesAsync(types, cursor, limit, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <summary>Gets list of upcoming bookings hearing for a given case types</summary>
        /// <param name="types">The hearing case types.</param>
        /// <param name="cursor">Cursor specifying from which entries to read next page, is defaulted if not specified</param>
        /// <param name="limit">The max number hearings records to return.</param>
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<BookingsResponse> GetHearingsByTypesAsync(System.Collections.Generic.IEnumerable<int> types, string cursor, int? limit, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/Hearings/types?");
            if (types != null) 
            {
                foreach (var item_ in types) { urlBuilder_.Append("types=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (cursor != null) 
            {
                urlBuilder_.Append("cursor=").Append(System.Uri.EscapeDataString(ConvertToString(cursor, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (limit != null) 
            {
                urlBuilder_.Append("limit=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(BookingsResponse); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<BookingsResponse>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new HearingApiException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "400") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new HearingApiException("Bad Request", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new HearingApiException("Not Found", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new HearingApiException("Unauthorized", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new HearingApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(BookingsResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Gets list of associated cases for a given hearing id</summary>
        /// <param name="hearingId">Hearing id</param>
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.List<CaseResponse>> GetCasesForHearingAsync(long hearingId)
        {
            return GetCasesForHearingAsync(hearingId, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Gets list of associated cases for a given hearing id</summary>
        /// <param name="hearingId">Hearing id</param>
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        public System.Collections.Generic.List<CaseResponse> GetCasesForHearing(long hearingId)
        {
            return System.Threading.Tasks.Task.Run(async () => await GetCasesForHearingAsync(hearingId, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <summary>Gets list of associated cases for a given hearing id</summary>
        /// <param name="hearingId">Hearing id</param>
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<System.Collections.Generic.List<CaseResponse>> GetCasesForHearingAsync(long hearingId, System.Threading.CancellationToken cancellationToken)
        {
            if (hearingId == null)
                throw new System.ArgumentNullException("hearingId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/Hearings/{hearingId}/cases");
            urlBuilder_.Replace("{hearingId}", System.Uri.EscapeDataString(ConvertToString(hearingId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.Generic.List<CaseResponse>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.Generic.List<CaseResponse>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new HearingApiException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "400") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new HearingApiException("Bad Request", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new HearingApiException("Not Found", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new HearingApiException("Unauthorized", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new HearingApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.Generic.List<CaseResponse>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>The hearing status</summary>
        /// <param name="hearingId">ID of hearing to get status of</param>
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Response> GetHearingStatusAsync(long hearingId)
        {
            return GetHearingStatusAsync(hearingId, System.Threading.CancellationToken.None);
        }
    
        /// <summary>The hearing status</summary>
        /// <param name="hearingId">ID of hearing to get status of</param>
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        public Response GetHearingStatus(long hearingId)
        {
            return System.Threading.Tasks.Task.Run(async () => await GetHearingStatusAsync(hearingId, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <summary>The hearing status</summary>
        /// <param name="hearingId">ID of hearing to get status of</param>
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<Response> GetHearingStatusAsync(long hearingId, System.Threading.CancellationToken cancellationToken)
        {
            if (hearingId == null)
                throw new System.ArgumentNullException("hearingId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/Hearings/{hearingId}/status");
            urlBuilder_.Replace("{hearingId}", System.Uri.EscapeDataString(ConvertToString(hearingId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Response); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Response>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new HearingApiException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "404") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new HearingApiException("Not Found", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new HearingApiException("Unauthorized", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new HearingApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Response);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Update the notification to reflect new status</summary>
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ParticipantNotificationResponse> UpdateParticipantNotificationAsync(long hearingId, long participantId, UpdateParticipantNotificationRequest request)
        {
            return UpdateParticipantNotificationAsync(hearingId, participantId, request, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Update the notification to reflect new status</summary>
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        public ParticipantNotificationResponse UpdateParticipantNotification(long hearingId, long participantId, UpdateParticipantNotificationRequest request)
        {
            return System.Threading.Tasks.Task.Run(async () => await UpdateParticipantNotificationAsync(hearingId, participantId, request, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <summary>Update the notification to reflect new status</summary>
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<ParticipantNotificationResponse> UpdateParticipantNotificationAsync(long hearingId, long participantId, UpdateParticipantNotificationRequest request, System.Threading.CancellationToken cancellationToken)
        {
            if (hearingId == null)
                throw new System.ArgumentNullException("hearingId");
    
            if (participantId == null)
                throw new System.ArgumentNullException("participantId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/Hearings/{hearingId}/participants/{participantId}/notifications");
            urlBuilder_.Replace("{hearingId}", System.Uri.EscapeDataString(ConvertToString(hearingId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{participantId}", System.Uri.EscapeDataString(ConvertToString(participantId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(request, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ParticipantNotificationResponse); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ParticipantNotificationResponse>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new HearingApiException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "400") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new HearingApiException("Bad Request", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new HearingApiException("Unauthorized", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new HearingApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(ParticipantNotificationResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Adds a new notification to the hearing participant</summary>
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ParticipantNotificationResponse> AddParticipantNotificationAsync(long hearingId, long participantId, CreateParticipantNotificationRequest request)
        {
            return AddParticipantNotificationAsync(hearingId, participantId, request, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Adds a new notification to the hearing participant</summary>
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        public ParticipantNotificationResponse AddParticipantNotification(long hearingId, long participantId, CreateParticipantNotificationRequest request)
        {
            return System.Threading.Tasks.Task.Run(async () => await AddParticipantNotificationAsync(hearingId, participantId, request, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <summary>Adds a new notification to the hearing participant</summary>
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<ParticipantNotificationResponse> AddParticipantNotificationAsync(long hearingId, long participantId, CreateParticipantNotificationRequest request, System.Threading.CancellationToken cancellationToken)
        {
            if (hearingId == null)
                throw new System.ArgumentNullException("hearingId");
    
            if (participantId == null)
                throw new System.ArgumentNullException("participantId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/Hearings/{hearingId}/participants/{participantId}/notifications");
            urlBuilder_.Replace("{hearingId}", System.Uri.EscapeDataString(ConvertToString(hearingId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{participantId}", System.Uri.EscapeDataString(ConvertToString(participantId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(request, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "201") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ParticipantNotificationResponse); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ParticipantNotificationResponse>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new HearingApiException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "400") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new HearingApiException("Bad Request", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new HearingApiException("Unauthorized", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new HearingApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(ParticipantNotificationResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Gets the participant details by username in an active hearing</summary>
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ParticipantResponse> GetHearingParticipantByUsernameAsync(string username)
        {
            return GetHearingParticipantByUsernameAsync(username, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Gets the participant details by username in an active hearing</summary>
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        public ParticipantResponse GetHearingParticipantByUsername(string username)
        {
            return System.Threading.Tasks.Task.Run(async () => await GetHearingParticipantByUsernameAsync(username, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <summary>Gets the participant details by username in an active hearing</summary>
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<ParticipantResponse> GetHearingParticipantByUsernameAsync(string username, System.Threading.CancellationToken cancellationToken)
        {
            if (username == null)
                throw new System.ArgumentNullException("username");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/Participants/{username}");
            urlBuilder_.Replace("{username}", System.Uri.EscapeDataString(ConvertToString(username, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ParticipantResponse); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ParticipantResponse>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new HearingApiException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "400") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new HearingApiException("Bad Request", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new HearingApiException("Not Found", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new HearingApiException("Unauthorized", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new HearingApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(ParticipantResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Get a participant details by email</summary>
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ParticipantResponse> GetParticipantByEmailAsync(string email)
        {
            return GetParticipantByEmailAsync(email, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Get a participant details by email</summary>
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        public ParticipantResponse GetParticipantByEmail(string email)
        {
            return System.Threading.Tasks.Task.Run(async () => await GetParticipantByEmailAsync(email, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <summary>Get a participant details by email</summary>
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<ParticipantResponse> GetParticipantByEmailAsync(string email, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/Participants?");
            if (email != null) 
            {
                urlBuilder_.Append("email=").Append(System.Uri.EscapeDataString(ConvertToString(email, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ParticipantResponse); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ParticipantResponse>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new HearingApiException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "400") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new HearingApiException("Bad Request", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new HearingApiException("Not Found", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new HearingApiException("Unauthorized", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new HearingApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(ParticipantResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Gets any submitted checklist the participant has completed</summary>
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ChecklistRequiredResponse> GetHearingParticipantChecklistByUsernameAsync(string username)
        {
            return GetHearingParticipantChecklistByUsernameAsync(username, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Gets any submitted checklist the participant has completed</summary>
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        public ChecklistRequiredResponse GetHearingParticipantChecklistByUsername(string username)
        {
            return System.Threading.Tasks.Task.Run(async () => await GetHearingParticipantChecklistByUsernameAsync(username, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <summary>Gets any submitted checklist the participant has completed</summary>
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<ChecklistRequiredResponse> GetHearingParticipantChecklistByUsernameAsync(string username, System.Threading.CancellationToken cancellationToken)
        {
            if (username == null)
                throw new System.ArgumentNullException("username");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/Participants/{username}/ChecklistStatus");
            urlBuilder_.Replace("{username}", System.Uri.EscapeDataString(ConvertToString(username, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ChecklistRequiredResponse); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ChecklistRequiredResponse>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new HearingApiException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "400") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new HearingApiException("Bad Request", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new HearingApiException("Not Found", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new HearingApiException("Unauthorized", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new HearingApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(ChecklistRequiredResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Gets the participant current status</summary>
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ParticipantStatusResponse> GetCurrentStatusForHearingParticipantAsync(long hearingId, long participantId)
        {
            return GetCurrentStatusForHearingParticipantAsync(hearingId, participantId, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Gets the participant current status</summary>
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        public ParticipantStatusResponse GetCurrentStatusForHearingParticipant(long hearingId, long participantId)
        {
            return System.Threading.Tasks.Task.Run(async () => await GetCurrentStatusForHearingParticipantAsync(hearingId, participantId, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <summary>Gets the participant current status</summary>
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<ParticipantStatusResponse> GetCurrentStatusForHearingParticipantAsync(long hearingId, long participantId, System.Threading.CancellationToken cancellationToken)
        {
            if (hearingId == null)
                throw new System.ArgumentNullException("hearingId");
    
            if (participantId == null)
                throw new System.ArgumentNullException("participantId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/hearings/{hearingId}/participants/{participantId}/status/current");
            urlBuilder_.Replace("{hearingId}", System.Uri.EscapeDataString(ConvertToString(hearingId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{participantId}", System.Uri.EscapeDataString(ConvertToString(participantId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ParticipantStatusResponse); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ParticipantStatusResponse>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new HearingApiException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "400") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new HearingApiException("Bad Request", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new HearingApiException("Not Found", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new HearingApiException("Unauthorized", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new HearingApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(ParticipantStatusResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Gets the participant's status history for a given hearing</summary>
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ParticipantStatusResponse> GetHearingParticipantStatusHistoryAsync(long hearingId, long participantId)
        {
            return GetHearingParticipantStatusHistoryAsync(hearingId, participantId, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Gets the participant's status history for a given hearing</summary>
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        public ParticipantStatusResponse GetHearingParticipantStatusHistory(long hearingId, long participantId)
        {
            return System.Threading.Tasks.Task.Run(async () => await GetHearingParticipantStatusHistoryAsync(hearingId, participantId, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <summary>Gets the participant's status history for a given hearing</summary>
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<ParticipantStatusResponse> GetHearingParticipantStatusHistoryAsync(long hearingId, long participantId, System.Threading.CancellationToken cancellationToken)
        {
            if (hearingId == null)
                throw new System.ArgumentNullException("hearingId");
    
            if (participantId == null)
                throw new System.ArgumentNullException("participantId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/hearings/{hearingId}/participants/{participantId}/status");
            urlBuilder_.Replace("{hearingId}", System.Uri.EscapeDataString(ConvertToString(hearingId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{participantId}", System.Uri.EscapeDataString(ConvertToString(participantId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ParticipantStatusResponse); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ParticipantStatusResponse>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new HearingApiException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "400") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new HearingApiException("Bad Request", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new HearingApiException("Not Found", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new HearingApiException("Unauthorized", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new HearingApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(ParticipantStatusResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Create a participant status.</summary>
        /// <param name="hearingId">The hearing Id.</param>
        /// <param name="participantId">The participant Id.</param>
        /// <param name="participantStatusRequest">The participant status request object.</param>
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task UpdateHearingParticipantStatusAsync(long hearingId, long participantId, ParticipantStatusRequest participantStatusRequest)
        {
            return UpdateHearingParticipantStatusAsync(hearingId, participantId, participantStatusRequest, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Create a participant status.</summary>
        /// <param name="hearingId">The hearing Id.</param>
        /// <param name="participantId">The participant Id.</param>
        /// <param name="participantStatusRequest">The participant status request object.</param>
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        public void UpdateHearingParticipantStatus(long hearingId, long participantId, ParticipantStatusRequest participantStatusRequest)
        {
            System.Threading.Tasks.Task.Run(async () => await UpdateHearingParticipantStatusAsync(hearingId, participantId, participantStatusRequest, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <summary>Create a participant status.</summary>
        /// <param name="hearingId">The hearing Id.</param>
        /// <param name="participantId">The participant Id.</param>
        /// <param name="participantStatusRequest">The participant status request object.</param>
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task UpdateHearingParticipantStatusAsync(long hearingId, long participantId, ParticipantStatusRequest participantStatusRequest, System.Threading.CancellationToken cancellationToken)
        {
            if (hearingId == null)
                throw new System.ArgumentNullException("hearingId");
    
            if (participantId == null)
                throw new System.ArgumentNullException("participantId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/hearings/{hearingId}/participants/{participantId}/status");
            urlBuilder_.Replace("{hearingId}", System.Uri.EscapeDataString(ConvertToString(hearingId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{participantId}", System.Uri.EscapeDataString(ConvertToString(participantId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(participantStatusRequest, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            return;
                        }
                        else
                        if (status_ == "404") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new HearingApiException("Not Found", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ == "400") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new HearingApiException("Bad Request", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new HearingApiException("Unauthorized", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new HearingApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Gets a list hearing types</summary>
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.List<HearingTypeResponse>> GetHearingTypesAsync()
        {
            return GetHearingTypesAsync(System.Threading.CancellationToken.None);
        }
    
        /// <summary>Gets a list hearing types</summary>
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        public System.Collections.Generic.List<HearingTypeResponse> GetHearingTypes()
        {
            return System.Threading.Tasks.Task.Run(async () => await GetHearingTypesAsync(System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <summary>Gets a list hearing types</summary>
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<System.Collections.Generic.List<HearingTypeResponse>> GetHearingTypesAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/hearings/type");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.Generic.List<HearingTypeResponse>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.Generic.List<HearingTypeResponse>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new HearingApiException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "404") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new HearingApiException("Not Found", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new HearingApiException("Unauthorized", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new HearingApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.Generic.List<HearingTypeResponse>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Gets a list of hearing mediums</summary>
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.List<HearingMediumResponse>> GetHearingsMediumsAsync()
        {
            return GetHearingsMediumsAsync(System.Threading.CancellationToken.None);
        }
    
        /// <summary>Gets a list of hearing mediums</summary>
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        public System.Collections.Generic.List<HearingMediumResponse> GetHearingsMediums()
        {
            return System.Threading.Tasks.Task.Run(async () => await GetHearingsMediumsAsync(System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <summary>Gets a list of hearing mediums</summary>
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<System.Collections.Generic.List<HearingMediumResponse>> GetHearingsMediumsAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/hearings/medium");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.Generic.List<HearingMediumResponse>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.Generic.List<HearingMediumResponse>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new HearingApiException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "404") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new HearingApiException("Not Found", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new HearingApiException("Unauthorized", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new HearingApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.Generic.List<HearingMediumResponse>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Gets a hearing status types</summary>
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.List<HearingStatusTypeResponse>> GetHearingStatusTypesAsync()
        {
            return GetHearingStatusTypesAsync(System.Threading.CancellationToken.None);
        }
    
        /// <summary>Gets a hearing status types</summary>
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        public System.Collections.Generic.List<HearingStatusTypeResponse> GetHearingStatusTypes()
        {
            return System.Threading.Tasks.Task.Run(async () => await GetHearingStatusTypesAsync(System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <summary>Gets a hearing status types</summary>
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<System.Collections.Generic.List<HearingStatusTypeResponse>> GetHearingStatusTypesAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/hearings/status-type");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.Generic.List<HearingStatusTypeResponse>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.Generic.List<HearingStatusTypeResponse>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new HearingApiException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "404") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new HearingApiException("Not Found", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new HearingApiException("Unauthorized", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new HearingApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.Generic.List<HearingStatusTypeResponse>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Get available participant roles</summary>
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.List<ParticipantRoleResponse>> GetParticipantRolesAsync()
        {
            return GetParticipantRolesAsync(System.Threading.CancellationToken.None);
        }
    
        /// <summary>Get available participant roles</summary>
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        public System.Collections.Generic.List<ParticipantRoleResponse> GetParticipantRoles()
        {
            return System.Threading.Tasks.Task.Run(async () => await GetParticipantRolesAsync(System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <summary>Get available participant roles</summary>
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<System.Collections.Generic.List<ParticipantRoleResponse>> GetParticipantRolesAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/hearings/participantroles");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.Generic.List<ParticipantRoleResponse>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.Generic.List<ParticipantRoleResponse>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new HearingApiException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "404") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new HearingApiException("Not Found", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new HearingApiException("Unauthorized", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new HearingApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.Generic.List<ParticipantRoleResponse>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Get available courts</summary>
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.List<CourtResponse>> GetCourtsAsync()
        {
            return GetCourtsAsync(System.Threading.CancellationToken.None);
        }
    
        /// <summary>Get available courts</summary>
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        public System.Collections.Generic.List<CourtResponse> GetCourts()
        {
            return System.Threading.Tasks.Task.Run(async () => await GetCourtsAsync(System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <summary>Get available courts</summary>
        /// <returns>Success</returns>
        /// <exception cref="HearingApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<System.Collections.Generic.List<CourtResponse>> GetCourtsAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/hearings/courts");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.Generic.List<CourtResponse>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.Generic.List<CourtResponse>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new HearingApiException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "404") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new HearingApiException("Not Found", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new HearingApiException("Unauthorized", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new HearingApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.Generic.List<CourtResponse>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value is System.Enum)
            {
                string name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value;
                        }
                    }
                }
            }
            else if (value is bool) {
                return System.Convert.ToString(value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value != null && value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }
        
            return System.Convert.ToString(value, cultureInfo);
        }
    }
    
    

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.13.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class AddPreHearingChecklistRequest 
    {
        [Newtonsoft.Json.JsonProperty("question_answers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<QuestionAnswerRequest> Question_answers { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static AddPreHearingChecklistRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<AddPreHearingChecklistRequest>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.13.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class QuestionAnswerRequest 
    {
        [Newtonsoft.Json.JsonProperty("question_key", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Question_key { get; set; }
    
        [Newtonsoft.Json.JsonProperty("answer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Answer { get; set; }
    
        [Newtonsoft.Json.JsonProperty("notes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Notes { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static QuestionAnswerRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<QuestionAnswerRequest>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.13.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ParticipantChecklistResponse 
    {
        /// <summary>The responses to checklist question the participant has submitted</summary>
        [Newtonsoft.Json.JsonProperty("question_answer_responses", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<QuestionAnswerResponse> Question_answer_responses { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static ParticipantChecklistResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ParticipantChecklistResponse>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.13.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class QuestionAnswerResponse 
    {
        [Newtonsoft.Json.JsonProperty("question_key", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Question_key { get; set; }
    
        [Newtonsoft.Json.JsonProperty("answer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Answer { get; set; }
    
        [Newtonsoft.Json.JsonProperty("notes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Notes { get; set; }
    
        [Newtonsoft.Json.JsonProperty("created_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? Created_at { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static QuestionAnswerResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<QuestionAnswerResponse>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.13.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ChecklistsResponse 
    {
        /// <summary>Gets or sets check list for hearing and participant.</summary>
        [Newtonsoft.Json.JsonProperty("checklists", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<HearingParticipantCheckListResponse> Checklists { get; set; }
    
        /// <summary>A list of hearings referenced by checklist responses in HearingsApi.Contract.Responses.ChecklistsResponse.Checklists.</summary>
        [Newtonsoft.Json.JsonProperty("hearings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<ChecklistsHearingResponse> Hearings { get; set; }
    
        /// <summary>Total number of items across all pages</summary>
        [Newtonsoft.Json.JsonProperty("total_count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Total_count { get; set; }
    
        /// <summary>Maximum number of items returned in items</summary>
        [Newtonsoft.Json.JsonProperty("page_size", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Page_size { get; set; }
    
        /// <summary>The total number of pages given the current page size</summary>
        [Newtonsoft.Json.JsonProperty("total_pages", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Total_pages { get; set; }
    
        /// <summary>Numbering of this paged response, starting from 1</summary>
        [Newtonsoft.Json.JsonProperty("current_page", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Current_page { get; set; }
    
        /// <summary>Absolute url to the previous page of items.
        /// Will be null for the first page.</summary>
        [Newtonsoft.Json.JsonProperty("prev_page_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Prev_page_url { get; set; }
    
        /// <summary>Absolute url for the next page of items.
        /// Will be null for the last page.</summary>
        [Newtonsoft.Json.JsonProperty("next_page_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Next_page_url { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static ChecklistsResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ChecklistsResponse>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.13.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class HearingParticipantCheckListResponse 
    {
        [Newtonsoft.Json.JsonProperty("hearing_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Hearing_id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("participant_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Participant_id { get; set; }
    
        /// <summary>The participants title (i.e. Mr, Ms)</summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }
    
        [Newtonsoft.Json.JsonProperty("first_name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string First_name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("last_name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Last_name { get; set; }
    
        /// <summary>The participant role</summary>
        [Newtonsoft.Json.JsonProperty("role", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Role { get; set; }
    
        /// <summary>The date and time the checklist was submitted</summary>
        [Newtonsoft.Json.JsonProperty("completed_date", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? Completed_date { get; set; }
    
        /// <summary>Checklist answers submitted</summary>
        [Newtonsoft.Json.JsonProperty("question_answer_responses", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<QuestionAnswerResponse> Question_answer_responses { get; set; }
    
        /// <summary>Landline number to the participant</summary>
        [Newtonsoft.Json.JsonProperty("landline", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Landline { get; set; }
    
        /// <summary>Mobile phone number to the participant</summary>
        [Newtonsoft.Json.JsonProperty("mobile", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Mobile { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static HearingParticipantCheckListResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<HearingParticipantCheckListResponse>(data);
        }
    
    }
    
    /// <summary>Hearing information for participant checklists</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.13.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ChecklistsHearingResponse 
    {
        [Newtonsoft.Json.JsonProperty("hearing_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Hearing_id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("scheduled_date_time", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? Scheduled_date_time { get; set; }
    
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Status { get; set; }
    
        [Newtonsoft.Json.JsonProperty("cases", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<CaseResponse> Cases { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static ChecklistsHearingResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ChecklistsHearingResponse>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.13.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CaseResponse 
    {
        /// <summary>The case number</summary>
        [Newtonsoft.Json.JsonProperty("number", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Number { get; set; }
    
        /// <summary>The case name</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static CaseResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CaseResponse>(data);
        }
    
    }
    
    /// <summary>Assign the conference details for the hearing</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.13.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class AddConferenceDetailsRequest 
    {
        /// <summary>The uri for the conference</summary>
        [Newtonsoft.Json.JsonProperty("meeting_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Meeting_url { get; set; }
    
        /// <summary>The uri used for joining a conference</summary>
        [Newtonsoft.Json.JsonProperty("join_meeting_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Join_meeting_url { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static AddConferenceDetailsRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<AddConferenceDetailsRequest>(data);
        }
    
    }
    
    /// <summary>Participant details</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.13.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ParticipantResponse 
    {
        /// <summary>Participant Id.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Id { get; set; }
    
        /// <summary>Participant Title.</summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }
    
        /// <summary>Participant first name.</summary>
        [Newtonsoft.Json.JsonProperty("first_name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string First_name { get; set; }
    
        /// <summary>Participant middle name.</summary>
        [Newtonsoft.Json.JsonProperty("middle_names", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Middle_names { get; set; }
    
        /// <summary>Participant last name.</summary>
        [Newtonsoft.Json.JsonProperty("last_name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Last_name { get; set; }
    
        /// <summary>Participant display name.</summary>
        [Newtonsoft.Json.JsonProperty("display_name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Display_name { get; set; }
    
        /// <summary>Participant username</summary>
        [Newtonsoft.Json.JsonProperty("username", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Username { get; set; }
    
        /// <summary>Participant username</summary>
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email { get; set; }
    
        /// <summary>Participant external Id.</summary>
        [Newtonsoft.Json.JsonProperty("external_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string External_id { get; set; }
    
        /// <summary>Flag to indicate that the participant is an external user.</summary>
        [Newtonsoft.Json.JsonProperty("external_flag", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? External_flag { get; set; }
    
        /// <summary>Participant landline phone number.</summary>
        [Newtonsoft.Json.JsonProperty("phone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Phone { get; set; }
    
        /// <summary>Participant mobile phone number.</summary>
        [Newtonsoft.Json.JsonProperty("mobile_phone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Mobile_phone { get; set; }
    
        /// <summary>name of the organisation that participant belongs.</summary>
        [Newtonsoft.Json.JsonProperty("organisation_name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Organisation_name { get; set; }
    
        /// <summary>Organisation address.</summary>
        [Newtonsoft.Json.JsonProperty("organisation_address", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Organisation_address { get; set; }
    
        /// <summary>Name of a person who represents the participant.</summary>
        [Newtonsoft.Json.JsonProperty("representing", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Representing { get; set; }
    
        /// <summary>Participant feed Id.</summary>
        [Newtonsoft.Json.JsonProperty("feed_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Feed_id { get; set; }
    
        /// <summary>Participant location(end point).</summary>
        [Newtonsoft.Json.JsonProperty("location", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Location { get; set; }
    
        /// <summary>Participant role.</summary>
        [Newtonsoft.Json.JsonProperty("participant_role", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Participant_role { get; set; }
    
        /// <summary>Participant's current status.</summary>
        [Newtonsoft.Json.JsonProperty("current_status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ParticipantStatusResponse Current_status { get; set; }
    
        /// <summary>List of participant notifications</summary>
        [Newtonsoft.Json.JsonProperty("notifications", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<ParticipantNotificationResponse> Notifications { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static ParticipantResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ParticipantResponse>(data);
        }
    
    }
    
    /// <summary>Participant current status response</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.13.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ParticipantStatusResponse 
    {
        /// <summary>Gets or sets the ID.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Id { get; set; }
    
        /// <summary>Gets or sets the hearing Id.</summary>
        [Newtonsoft.Json.JsonProperty("hearing_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Hearing_id { get; set; }
    
        /// <summary>Gets or sets the participant Id.</summary>
        [Newtonsoft.Json.JsonProperty("participant_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Participant_id { get; set; }
    
        /// <summary>Gets or sets the current status Id.</summary>
        [Newtonsoft.Json.JsonProperty("status_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Status_id { get; set; }
    
        /// <summary>Gets or sets the current status.</summary>
        [Newtonsoft.Json.JsonProperty("status_name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Status_name { get; set; }
    
        /// <summary>Gets or sets the current status additional info.</summary>
        [Newtonsoft.Json.JsonProperty("additional_info", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Additional_info { get; set; }
    
        /// <summary>Gets or sets the created date and time of status.</summary>
        [Newtonsoft.Json.JsonProperty("created_date", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? Created_date { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static ParticipantStatusResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ParticipantStatusResponse>(data);
        }
    
    }
    
    /// <summary>Notification for a participant in a hearing</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.13.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ParticipantNotificationResponse 
    {
        /// <summary>Unique identified for the notification</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Id { get; set; }
    
        /// <summary>Type of event that occured or notification that was raised</summary>
        [Newtonsoft.Json.JsonProperty("notification_type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Notification_type { get; set; }
    
        /// <summary>Data stored for the notification</summary>
        [Newtonsoft.Json.JsonProperty("log_information", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Log_information { get; set; }
    
        /// <summary>Whether the notification/event was successful or not</summary>
        [Newtonsoft.Json.JsonProperty("result", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Result { get; set; }
    
        /// <summary>Time the notification was created</summary>
        [Newtonsoft.Json.JsonProperty("create_time", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? Create_time { get; set; }
    
        /// <summary>If the notification has been seen by administrators or not</summary>
        [Newtonsoft.Json.JsonProperty("is_seen", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Is_seen { get; set; }
    
        /// <summary>If the notification has been handled/dismissed by administrators</summary>
        [Newtonsoft.Json.JsonProperty("is_dismissed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Is_dismissed { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static ParticipantNotificationResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ParticipantNotificationResponse>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.13.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class AddParticipantRequest 
    {
        /// <summary>List of related feeds for the hearing</summary>
        [Newtonsoft.Json.JsonProperty("feeds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<FeedRequest> Feeds { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static AddParticipantRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<AddParticipantRequest>(data);
        }
    
    }
    
    /// <summary>Feed Request Object</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.13.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class FeedRequest 
    {
        /// <summary>Hearing Location</summary>
        [Newtonsoft.Json.JsonProperty("location", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Location { get; set; }
    
        /// <summary>List of participants in that particular location</summary>
        [Newtonsoft.Json.JsonProperty("participants", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<ParticipantRequest> Participants { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static FeedRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FeedRequest>(data);
        }
    
    }
    
    /// <summary>Participant class</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.13.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ParticipantRequest 
    {
        /// <summary>Participant</summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }
    
        /// <summary>Participant FirstName</summary>
        [Newtonsoft.Json.JsonProperty("first_name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string First_name { get; set; }
    
        /// <summary>Participant Last Name</summary>
        [Newtonsoft.Json.JsonProperty("last_name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Last_name { get; set; }
    
        /// <summary>Participant MiddleNames</summary>
        [Newtonsoft.Json.JsonProperty("middle_names", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Middle_names { get; set; }
    
        /// <summary>Participant Diaply Name</summary>
        [Newtonsoft.Json.JsonProperty("display_name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Display_name { get; set; }
    
        /// <summary>Participant Username (HMCTS login)</summary>
        [Newtonsoft.Json.JsonProperty("username", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Username { get; set; }
    
        /// <summary>Participant Email Address</summary>
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email { get; set; }
    
        /// <summary>Participant External Id If Participant is an external participant</summary>
        [Newtonsoft.Json.JsonProperty("external_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string External_id { get; set; }
    
        /// <summary>Set to true If Participant is an external participant</summary>
        [Newtonsoft.Json.JsonProperty("external_flag", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? External_flag { get; set; }
    
        /// <summary>Participant Role</summary>
        [Newtonsoft.Json.JsonProperty("role", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Role { get; set; }
    
        /// <summary>Participant Phone Number</summary>
        [Newtonsoft.Json.JsonProperty("phone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Phone { get; set; }
    
        /// <summary>Participant Mobile Phone Number</summary>
        [Newtonsoft.Json.JsonProperty("mobile", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Mobile { get; set; }
    
        /// <summary>Participant representing behalf of</summary>
        [Newtonsoft.Json.JsonProperty("representing", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Representing { get; set; }
    
        /// <summary>Participant Organisation Name</summary>
        [Newtonsoft.Json.JsonProperty("organisation_name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Organisation_name { get; set; }
    
        /// <summary>Participant Organisation Address</summary>
        [Newtonsoft.Json.JsonProperty("organisation_address", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Organisation_address { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static ParticipantRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ParticipantRequest>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.13.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class UpdateHearingParticipantRequest 
    {
        /// <summary>Role for participant in given hearing</summary>
        [Newtonsoft.Json.JsonProperty("role", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Role { get; set; }
    
        /// <summary>Display name for participant in given hearing</summary>
        [Newtonsoft.Json.JsonProperty("display_name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Display_name { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static UpdateHearingParticipantRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<UpdateHearingParticipantRequest>(data);
        }
    
    }
    
    /// <summary>A hearing</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.13.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class HearingResponse 
    {
        /// <summary>List of cases associated to the hearing</summary>
        [Newtonsoft.Json.JsonProperty("cases", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<CaseResponse> Cases { get; set; }
    
        /// <summary>The date and time for a hearing</summary>
        [Newtonsoft.Json.JsonProperty("scheduled_date_time", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? Scheduled_date_time { get; set; }
    
        /// <summary>The duration of a hearing (number of minutes)</summary>
        [Newtonsoft.Json.JsonProperty("scheduled_duration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Scheduled_duration { get; set; }
    
        /// <summary>The type of hearing (e.g. Civil Money Claims)</summary>
        [Newtonsoft.Json.JsonProperty("hearing_type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Hearing_type { get; set; }
    
        /// <summary>The medium over which the hearing will be conducted (e.g. Video, Audio, Mixed)</summary>
        [Newtonsoft.Json.JsonProperty("hearing_medium", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Hearing_medium { get; set; }
    
        /// <summary>The hearing status (e.g. Created, Live).</summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Status { get; set; }
    
        /// <summary>The unique identifier for the hearing.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Id { get; set; }
    
        /// <summary>The meeting Url for the video hearing</summary>
        [Newtonsoft.Json.JsonProperty("meeting_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Meeting_url { get; set; }
    
        /// <summary>The joining Url for the video hearing</summary>
        [Newtonsoft.Json.JsonProperty("joining_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Joining_url { get; set; }
    
        /// <summary>The expiry time for the meeting url</summary>
        [Newtonsoft.Json.JsonProperty("meeting_url_expiry_time", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? Meeting_url_expiry_time { get; set; }
    
        /// <summary>List of participants associated with hearing</summary>
        [Newtonsoft.Json.JsonProperty("participants", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<ParticipantResponse> Participants { get; set; }
    
        /// <summary>Court</summary>
        [Newtonsoft.Json.JsonProperty("court", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CourtResponse Court { get; set; }
    
        /// <summary>Gets or sets the name of person who created the hearing.</summary>
        [Newtonsoft.Json.JsonProperty("created_by", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Created_by { get; set; }
    
        /// <summary>Gets or sets created hearing date.</summary>
        [Newtonsoft.Json.JsonProperty("created_date", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? Created_date { get; set; }
    
        /// <summary>Gets or sets the name of person who update the hearing.</summary>
        [Newtonsoft.Json.JsonProperty("updated_by", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Updated_by { get; set; }
    
        /// <summary>Gets or sets updated hearing date.</summary>
        [Newtonsoft.Json.JsonProperty("updated_date", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? Updated_date { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static HearingResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<HearingResponse>(data);
        }
    
    }
    
    /// <summary>Court Response</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.13.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CourtResponse 
    {
        /// <summary>Court ID</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }
    
        /// <summary>Court room</summary>
        [Newtonsoft.Json.JsonProperty("room", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Room { get; set; }
    
        /// <summary>Court address</summary>
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Address { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static CourtResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CourtResponse>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.13.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class UpdateHearingStatusRequest 
    {
        /// <summary>Id of the participant who would like to change the status</summary>
        [Newtonsoft.Json.JsonProperty("participant_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Participant_id { get; set; }
    
        /// <summary>New status of the hearing</summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Status { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static UpdateHearingStatusRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<UpdateHearingStatusRequest>(data);
        }
    
    }
    
    /// <summary>Hearing Request Object</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.13.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class UpdateHearingRequest 
    {
        /// <summary>Hearing Schedule Date and Time</summary>
        [Newtonsoft.Json.JsonProperty("scheduled_date_time", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? Scheduled_date_time { get; set; }
    
        /// <summary>Duration of the hearing</summary>
        [Newtonsoft.Json.JsonProperty("scheduled_duration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Scheduled_duration { get; set; }
    
        /// <summary>CourtId where hearing will take place</summary>
        [Newtonsoft.Json.JsonProperty("court_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Court_id { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static UpdateHearingRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<UpdateHearingRequest>(data);
        }
    
    }
    
    /// <summary>Hearing Request Object</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.13.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class HearingRequest 
    {
        /// <summary>Hearing Schedule Date and Time</summary>
        [Newtonsoft.Json.JsonProperty("scheduled_date_time", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? Scheduled_date_time { get; set; }
    
        /// <summary>Duration of the hearing</summary>
        [Newtonsoft.Json.JsonProperty("scheduled_duration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Scheduled_duration { get; set; }
    
        /// <summary>Hearing Type Id</summary>
        [Newtonsoft.Json.JsonProperty("hearing_type_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Hearing_type_id { get; set; }
    
        /// <summary>Hearing Medium Id</summary>
        [Newtonsoft.Json.JsonProperty("hearing_medium_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Hearing_medium_id { get; set; }
    
        /// <summary>Court Id where hearing will take place</summary>
        [Newtonsoft.Json.JsonProperty("court_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Court_id { get; set; }
    
        /// <summary>Associated Case</summary>
        [Newtonsoft.Json.JsonProperty("cases", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<CaseRequest> Cases { get; set; }
    
        /// <summary>List of related feeds for the hearing</summary>
        [Newtonsoft.Json.JsonProperty("feeds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<FeedRequest> Feeds { get; set; }
    
        /// <summary>User booking the hearing</summary>
        [Newtonsoft.Json.JsonProperty("created_by", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Created_by { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static HearingRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<HearingRequest>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.13.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CaseRequest 
    {
        /// <summary>Case Number</summary>
        [Newtonsoft.Json.JsonProperty("number", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Number { get; set; }
    
        /// <summary>Case Name</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static CaseRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CaseRequest>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.13.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class BookingsResponse 
    {
        /// <summary>Gets or sets list of bookings hearings.</summary>
        [Newtonsoft.Json.JsonProperty("hearings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<BookingsByDateResponse> Hearings { get; set; }
    
        /// <summary>Gets or sets a unique sequential value to get next set of records. 
        /// value is set to 0 if no records to return.</summary>
        [Newtonsoft.Json.JsonProperty("next_cursor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Next_cursor { get; set; }
    
        /// <summary>Gets or sets the maximum number of items returned for the page.</summary>
        [Newtonsoft.Json.JsonProperty("limit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Limit { get; set; }
    
        /// <summary>Absolute url to the previous page of items.
        /// Will be null for the first page.</summary>
        [Newtonsoft.Json.JsonProperty("prev_page_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Prev_page_url { get; set; }
    
        /// <summary>Absolute url for the next page of items.
        /// Will be null for the last page.</summary>
        [Newtonsoft.Json.JsonProperty("next_page_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Next_page_url { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static BookingsResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<BookingsResponse>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.13.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class BookingsByDateResponse 
    {
        /// <summary>The hearings grouped by date without time.</summary>
        [Newtonsoft.Json.JsonProperty("scheduled_date", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? Scheduled_date { get; set; }
    
        /// <summary>Gets or sets list of bookings hearings.</summary>
        [Newtonsoft.Json.JsonProperty("hearings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<BookingsHearingResponse> Hearings { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static BookingsByDateResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<BookingsByDateResponse>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.13.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class BookingsHearingResponse 
    {
        /// <summary>Gets or sets the hearing ID.</summary>
        [Newtonsoft.Json.JsonProperty("hearing_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Hearing_id { get; set; }
    
        /// <summary>Gets or sets the hearing number/reference.</summary>
        [Newtonsoft.Json.JsonProperty("hearing_number", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Hearing_number { get; set; }
    
        /// <summary>Gets or sets the hearing title/name.</summary>
        [Newtonsoft.Json.JsonProperty("hearing_name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Hearing_name { get; set; }
    
        /// <summary>Gets or sets the hearing scheduled date and time.</summary>
        [Newtonsoft.Json.JsonProperty("scheduled_date_time", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? Scheduled_date_time { get; set; }
    
        /// <summary>Gets or sets the hearing duration.</summary>
        [Newtonsoft.Json.JsonProperty("scheduled_duration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Scheduled_duration { get; set; }
    
        /// <summary>Gets or sets the hearing case type.</summary>
        [Newtonsoft.Json.JsonProperty("hearing_type_name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Hearing_type_name { get; set; }
    
        /// <summary>Gets or sets the cour room.</summary>
        [Newtonsoft.Json.JsonProperty("court_room", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Court_room { get; set; }
    
        /// <summary>Gets or sets the court address.</summary>
        [Newtonsoft.Json.JsonProperty("court_address", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Court_address { get; set; }
    
        /// <summary>Gets or sets Judge name.</summary>
        [Newtonsoft.Json.JsonProperty("judge_name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Judge_name { get; set; }
    
        /// <summary>Gets or sets the name/email person who create the hearing.</summary>
        [Newtonsoft.Json.JsonProperty("created_by", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Created_by { get; set; }
    
        /// <summary>Gets or sets the created date of hearing.</summary>
        [Newtonsoft.Json.JsonProperty("created_date", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? Created_date { get; set; }
    
        /// <summary>Gets or sets the name/email person who last edit the hearing.</summary>
        [Newtonsoft.Json.JsonProperty("last_edit_by", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Last_edit_by { get; set; }
    
        /// <summary>Gets or sets the last edited date of hearing.</summary>
        [Newtonsoft.Json.JsonProperty("last_edit_date", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? Last_edit_date { get; set; }
    
        /// <summary>Gets the scheduled date without time.</summary>
        [Newtonsoft.Json.JsonProperty("hearing_date", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? Hearing_date { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static BookingsHearingResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<BookingsHearingResponse>(data);
        }
    
    }
    
    /// <summary>Data required to create a new hearing notification</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.13.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CreateParticipantNotificationRequest 
    {
        /// <summary>Type of event that occured or notification that was raised</summary>
        [Newtonsoft.Json.JsonProperty("notification_type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Notification_type { get; set; }
    
        /// <summary>Data stored for the notification</summary>
        [Newtonsoft.Json.JsonProperty("log_information", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Log_information { get; set; }
    
        /// <summary>Whether the notification/event was successful or not</summary>
        [Newtonsoft.Json.JsonProperty("result", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Result { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static CreateParticipantNotificationRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CreateParticipantNotificationRequest>(data);
        }
    
    }
    
    /// <summary>Values to update on the notification</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.13.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class UpdateParticipantNotificationRequest 
    {
        /// <summary>Type of event that occured or notification that was raised</summary>
        [Newtonsoft.Json.JsonProperty("notification_type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Notification_type { get; set; }
    
        /// <summary>If the notification should be marked as dismissed or not</summary>
        [Newtonsoft.Json.JsonProperty("is_dismissed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Is_dismissed { get; set; }
    
        /// <summary>If the notification should be marked as seen or not</summary>
        [Newtonsoft.Json.JsonProperty("is_seen", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Is_seen { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static UpdateParticipantNotificationRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<UpdateParticipantNotificationRequest>(data);
        }
    
    }
    
    /// <summary>Describes if a participant must submit a checklist or not</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.13.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ChecklistRequiredResponse 
    {
        /// <summary>If submitting a checklist is required for the participant</summary>
        [Newtonsoft.Json.JsonProperty("is_required", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Is_required { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static ChecklistRequiredResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ChecklistRequiredResponse>(data);
        }
    
    }
    
    /// <summary>Provides information for participant status request.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.13.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ParticipantStatusRequest 
    {
        /// <summary>Gets or sets the participant status name.</summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Status { get; set; }
    
        /// <summary>Additional information for the status.</summary>
        [Newtonsoft.Json.JsonProperty("additional_info", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Additional_info { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static ParticipantStatusRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ParticipantStatusRequest>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.13.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class HearingTypeResponse 
    {
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Code { get; set; }
    
        [Newtonsoft.Json.JsonProperty("group", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Group { get; set; }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static HearingTypeResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<HearingTypeResponse>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.13.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class HearingMediumResponse 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static HearingMediumResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<HearingMediumResponse>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.13.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class HearingStatusTypeResponse 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static HearingStatusTypeResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<HearingStatusTypeResponse>(data);
        }
    
    }
    
    /// <summary>Participant Role Response</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.13.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ParticipantRoleResponse 
    {
        /// <summary>The name of the role</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static ParticipantRoleResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ParticipantRoleResponse>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.13.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Response
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Created")]
        Created = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Live")]
        Live = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Paused")]
        Paused = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Adjourned")]
        Adjourned = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Suspended")]
        Suspended = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Closed")]
        Closed = 5,
    
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "12.0.11.0 (NJsonSchema v9.13.13.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class HearingApiException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public HearingApiException(string message, int statusCode, string response, System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException) 
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + response.Substring(0, response.Length >= 512 ? 512 : response.Length), innerException)
        {
            StatusCode = statusCode;
            Response = response; 
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "12.0.11.0 (NJsonSchema v9.13.13.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class HearingApiException<TResult> : HearingApiException
    {
        public TResult Result { get; private set; }

        public HearingApiException(string message, int statusCode, string response, System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException) 
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

    #pragma warning restore
}