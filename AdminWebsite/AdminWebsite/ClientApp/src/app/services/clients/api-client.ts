/* tslint:disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v12.0.14.0 (NJsonSchema v9.13.18.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const BH_API_BASE_URL = new InjectionToken<string>('BH_API_BASE_URL');

@Injectable({
    providedIn: 'root'
})
export class BHClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(BH_API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "https://localhost:5400";
    }

    /**
     * Gets list of all submitted participant checklists including participant and hearing details.
    Ordered by checklist submission date, most recent checklist first.
     * @param pageSize (optional) Maximum number of items to retrieve in the page, maximum allowed 1000.
     * @param page (optional) One-based index of page to retrieve.
     * @return Success
     */
    getAllParticipantsChecklists(pageSize: number | null | undefined, page: number | null | undefined): Observable<ChecklistsResponse> {
        let url_ = this.baseUrl + "/api/checklists?";
        if (pageSize !== undefined)
            url_ += "pageSize=" + encodeURIComponent("" + pageSize) + "&"; 
        if (page !== undefined)
            url_ += "page=" + encodeURIComponent("" + page) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAllParticipantsChecklists(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAllParticipantsChecklists(<any>response_);
                } catch (e) {
                    return <Observable<ChecklistsResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<ChecklistsResponse>><any>_observableThrow(response_);
        }));
    }

    protected processGetAllParticipantsChecklists(response: HttpResponseBase): Observable<ChecklistsResponse> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ChecklistsResponse.fromJS(resultData200) : new ChecklistsResponse();
            return _observableOf(result200);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = resultData404 ? ProblemDetails.fromJS(resultData404) : new ProblemDetails();
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = resultData400 ? ProblemDetails.fromJS(resultData400) : new ProblemDetails();
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ChecklistsResponse>(<any>null);
    }

    /**
     * Get the configuration settings for client
     * @return Success
     */
    getConfigSettings(): Observable<ClientSettingsResponse> {
        let url_ = this.baseUrl + "/api/config";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetConfigSettings(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetConfigSettings(<any>response_);
                } catch (e) {
                    return <Observable<ClientSettingsResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<ClientSettingsResponse>><any>_observableThrow(response_);
        }));
    }

    protected processGetConfigSettings(response: HttpResponseBase): Observable<ClientSettingsResponse> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ClientSettingsResponse.fromJS(resultData200) : new ClientSettingsResponse();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ClientSettingsResponse>(<any>null);
    }

    /**
     * Gets the all upcoming bookings hearing by the given case types for a hearing administrator.
     * @param cursor (optional) The unique sequential value of hearing ID.
     * @param limit (optional) The max number of hearings to be returned.
     * @return Success
     */
    getBookingsList(cursor: string | null | undefined, limit: number | null | undefined): Observable<BookingsResponse> {
        let url_ = this.baseUrl + "/api/hearings?";
        if (cursor !== undefined)
            url_ += "cursor=" + encodeURIComponent("" + cursor) + "&"; 
        if (limit !== undefined)
            url_ += "limit=" + encodeURIComponent("" + limit) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetBookingsList(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetBookingsList(<any>response_);
                } catch (e) {
                    return <Observable<BookingsResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<BookingsResponse>><any>_observableThrow(response_);
        }));
    }

    protected processGetBookingsList(response: HttpResponseBase): Observable<BookingsResponse> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? BookingsResponse.fromJS(resultData200) : new BookingsResponse();
            return _observableOf(result200);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = resultData404 ? ProblemDetails.fromJS(resultData404) : new ProblemDetails();
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = resultData400 ? ProblemDetails.fromJS(resultData400) : new ProblemDetails();
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<BookingsResponse>(<any>null);
    }

    /**
     * Create a hearing
     * @param hearingRequest (optional) Hearing Request object
     * @return Success
     */
    bookNewHearing(hearingRequest: BookNewHearingRequest | null | undefined): Observable<HearingDetailsResponse> {
        let url_ = this.baseUrl + "/api/hearings";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(hearingRequest);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processBookNewHearing(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processBookNewHearing(<any>response_);
                } catch (e) {
                    return <Observable<HearingDetailsResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<HearingDetailsResponse>><any>_observableThrow(response_);
        }));
    }

    protected processBookNewHearing(response: HttpResponseBase): Observable<HearingDetailsResponse> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 201) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result201: any = null;
            let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result201 = resultData201 ? HearingDetailsResponse.fromJS(resultData201) : new HearingDetailsResponse();
            return _observableOf(result201);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = resultData400 ? ProblemDetails.fromJS(resultData400) : new ProblemDetails();
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<HearingDetailsResponse>(<any>null);
    }

    /**
     * Gets bookings hearing by Id.
     * @param hearingId The unique sequential value of hearing ID.
     * @return Success
     */
    getHearingById(hearingId: string): Observable<HearingDetailsResponse> {
        let url_ = this.baseUrl + "/api/hearings/{hearingId}";
        if (hearingId === undefined || hearingId === null)
            throw new Error("The parameter 'hearingId' must be defined.");
        url_ = url_.replace("{hearingId}", encodeURIComponent("" + hearingId)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetHearingById(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetHearingById(<any>response_);
                } catch (e) {
                    return <Observable<HearingDetailsResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<HearingDetailsResponse>><any>_observableThrow(response_);
        }));
    }

    protected processGetHearingById(response: HttpResponseBase): Observable<HearingDetailsResponse> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? HearingDetailsResponse.fromJS(resultData200) : new HearingDetailsResponse();
            return _observableOf(result200);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = resultData404 ? ProblemDetails.fromJS(resultData404) : new ProblemDetails();
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = resultData400 ? ProblemDetails.fromJS(resultData400) : new ProblemDetails();
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<HearingDetailsResponse>(<any>null);
    }

    /**
     * Edit a hearing
     * @param hearingId The id of the hearing to update
     * @param editHearingRequest (optional) Hearing Request object for edit operation
     * @return Success
     */
    editHearing(hearingId: string, editHearingRequest: EditHearingRequest | null | undefined): Observable<HearingDetailsResponse> {
        let url_ = this.baseUrl + "/api/hearings/{hearingId}";
        if (hearingId === undefined || hearingId === null)
            throw new Error("The parameter 'hearingId' must be defined.");
        url_ = url_.replace("{hearingId}", encodeURIComponent("" + hearingId)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(editHearingRequest);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processEditHearing(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processEditHearing(<any>response_);
                } catch (e) {
                    return <Observable<HearingDetailsResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<HearingDetailsResponse>><any>_observableThrow(response_);
        }));
    }

    protected processEditHearing(response: HttpResponseBase): Observable<HearingDetailsResponse> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? HearingDetailsResponse.fromJS(resultData200) : new HearingDetailsResponse();
            return _observableOf(result200);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = resultData404 ? ProblemDetails.fromJS(resultData404) : new ProblemDetails();
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = resultData400 ? ProblemDetails.fromJS(resultData400) : new ProblemDetails();
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<HearingDetailsResponse>(<any>null);
    }

    /**
     * Update the hearing status.
     * @param hearingId The hearing id
     * @param updateBookingStatusRequest (optional) 
     * @return Success
     */
    updateBookingStatus(hearingId: string, updateBookingStatusRequest: UpdateBookingStatusRequest | null | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/hearings/{hearingId}";
        if (hearingId === undefined || hearingId === null)
            throw new Error("The parameter 'hearingId' must be defined.");
        url_ = url_.replace("{hearingId}", encodeURIComponent("" + hearingId)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(updateBookingStatusRequest);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("patch", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateBookingStatus(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateBookingStatus(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processUpdateBookingStatus(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = resultData404 ? ProblemDetails.fromJS(resultData404) : new ProblemDetails();
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = resultData400 ? ProblemDetails.fromJS(resultData400) : new ProblemDetails();
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * Gets person list by email search term.
     * @param term The email address search term.
     * @return Success
     */
    getPersonBySearchTerm(term: string): Observable<PersonResponse[]> {
        let url_ = this.baseUrl + "/api/persons/search/{term}";
        if (term === undefined || term === null)
            throw new Error("The parameter 'term' must be defined.");
        url_ = url_.replace("{term}", encodeURIComponent("" + term)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetPersonBySearchTerm(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetPersonBySearchTerm(<any>response_);
                } catch (e) {
                    return <Observable<PersonResponse[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<PersonResponse[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetPersonBySearchTerm(response: HttpResponseBase): Observable<PersonResponse[]> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(PersonResponse.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = resultData400 ? ProblemDetails.fromJS(resultData400) : new ProblemDetails();
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PersonResponse[]>(<any>null);
    }

    /**
     * Gets a list hearing types
     * @return Success
     */
    getHearingTypes(): Observable<HearingTypeResponse[]> {
        let url_ = this.baseUrl + "/api/reference/types";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetHearingTypes(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetHearingTypes(<any>response_);
                } catch (e) {
                    return <Observable<HearingTypeResponse[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<HearingTypeResponse[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetHearingTypes(response: HttpResponseBase): Observable<HearingTypeResponse[]> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(HearingTypeResponse.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = resultData404 ? ProblemDetails.fromJS(resultData404) : new ProblemDetails();
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<HearingTypeResponse[]>(<any>null);
    }

    /**
     * Get available participant roles
     * @param caseTypeName (optional) 
     * @return Success
     */
    getParticipantRoles(caseTypeName: string | null | undefined): Observable<CaseAndHearingRolesResponse[]> {
        let url_ = this.baseUrl + "/api/reference/participantroles?";
        if (caseTypeName !== undefined)
            url_ += "caseTypeName=" + encodeURIComponent("" + caseTypeName) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetParticipantRoles(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetParticipantRoles(<any>response_);
                } catch (e) {
                    return <Observable<CaseAndHearingRolesResponse[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<CaseAndHearingRolesResponse[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetParticipantRoles(response: HttpResponseBase): Observable<CaseAndHearingRolesResponse[]> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(CaseAndHearingRolesResponse.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = resultData404 ? ProblemDetails.fromJS(resultData404) : new ProblemDetails();
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CaseAndHearingRolesResponse[]>(<any>null);
    }

    /**
     * Get available courts
     * @return Success
     */
    getCourts(): Observable<HearingVenueResponse[]> {
        let url_ = this.baseUrl + "/api/reference/courts";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetCourts(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetCourts(<any>response_);
                } catch (e) {
                    return <Observable<HearingVenueResponse[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<HearingVenueResponse[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetCourts(response: HttpResponseBase): Observable<HearingVenueResponse[]> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(HearingVenueResponse.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = resultData404 ? ProblemDetails.fromJS(resultData404) : new ProblemDetails();
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<HearingVenueResponse[]>(<any>null);
    }

    /**
     * Get Judges
     * @return Success
     */
    getJudges(): Observable<JudgeResponse[]> {
        let url_ = this.baseUrl + "/api/accounts/judges";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetJudges(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetJudges(<any>response_);
                } catch (e) {
                    return <Observable<JudgeResponse[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<JudgeResponse[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetJudges(response: HttpResponseBase): Observable<JudgeResponse[]> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(JudgeResponse.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<JudgeResponse[]>(<any>null);
    }

    /**
     * @return Success
     */
    getUserProfile(): Observable<UserProfileResponse> {
        let url_ = this.baseUrl + "/api/user";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetUserProfile(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetUserProfile(<any>response_);
                } catch (e) {
                    return <Observable<UserProfileResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<UserProfileResponse>><any>_observableThrow(response_);
        }));
    }

    protected processGetUserProfile(response: HttpResponseBase): Observable<UserProfileResponse> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? UserProfileResponse.fromJS(resultData200) : new UserProfileResponse();
            return _observableOf(result200);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<UserProfileResponse>(<any>null);
    }
}

/** List of checklist responses */
export class ChecklistsResponse implements IChecklistsResponse {
    /** The checklists */
    checklists?: HearingParticipantCheckListResponse[] | undefined;
    /** Hearing details for the hearings the checklists refer to */
    hearings?: ChecklistsHearingResponse[] | undefined;
    /** Total count of checklists in the system */
    total_count?: number | undefined;
    /** The size of checklists requested for this page */
    page_size?: number | undefined;
    /** The total number of pages */
    total_pages?: number | undefined;
    /** The number of this given page, starting form one */
    current_page?: number | undefined;
    /** An absolute url to the previous page, or null if first page */
    prev_page_url?: string | undefined;
    /** An absolute url to the next page, or null if last page */
    next_page_url?: string | undefined;

    constructor(data?: IChecklistsResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["checklists"] && data["checklists"].constructor === Array) {
                this.checklists = [] as any;
                for (let item of data["checklists"])
                    this.checklists!.push(HearingParticipantCheckListResponse.fromJS(item));
            }
            if (data["hearings"] && data["hearings"].constructor === Array) {
                this.hearings = [] as any;
                for (let item of data["hearings"])
                    this.hearings!.push(ChecklistsHearingResponse.fromJS(item));
            }
            this.total_count = data["total_count"];
            this.page_size = data["page_size"];
            this.total_pages = data["total_pages"];
            this.current_page = data["current_page"];
            this.prev_page_url = data["prev_page_url"];
            this.next_page_url = data["next_page_url"];
        }
    }

    static fromJS(data: any): ChecklistsResponse {
        data = typeof data === 'object' ? data : {};
        let result = new ChecklistsResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.checklists && this.checklists.constructor === Array) {
            data["checklists"] = [];
            for (let item of this.checklists)
                data["checklists"].push(item.toJSON());
        }
        if (this.hearings && this.hearings.constructor === Array) {
            data["hearings"] = [];
            for (let item of this.hearings)
                data["hearings"].push(item.toJSON());
        }
        data["total_count"] = this.total_count;
        data["page_size"] = this.page_size;
        data["total_pages"] = this.total_pages;
        data["current_page"] = this.current_page;
        data["prev_page_url"] = this.prev_page_url;
        data["next_page_url"] = this.next_page_url;
        return data; 
    }
}

/** List of checklist responses */
export interface IChecklistsResponse {
    /** The checklists */
    checklists?: HearingParticipantCheckListResponse[] | undefined;
    /** Hearing details for the hearings the checklists refer to */
    hearings?: ChecklistsHearingResponse[] | undefined;
    /** Total count of checklists in the system */
    total_count?: number | undefined;
    /** The size of checklists requested for this page */
    page_size?: number | undefined;
    /** The total number of pages */
    total_pages?: number | undefined;
    /** The number of this given page, starting form one */
    current_page?: number | undefined;
    /** An absolute url to the previous page, or null if first page */
    prev_page_url?: string | undefined;
    /** An absolute url to the next page, or null if last page */
    next_page_url?: string | undefined;
}

/** A list of checklist answers for a given participant */
export class HearingParticipantCheckListResponse implements IHearingParticipantCheckListResponse {
    /** Id of the hearing the checklist was answered for */
    hearing_id?: number | undefined;
    /** The unique participant id */
    participant_id?: number | undefined;
    /** Participant title */
    title?: string | undefined;
    /** The participants first name */
    first_name?: string | undefined;
    /** The participants last name */
    last_name?: string | undefined;
    /** The participants role in the system */
    role?: string | undefined;
    /** The date and time the checklist was submitted */
    completed_date?: Date | undefined;
    /** A list of checklist responses */
    question_answer_responses?: QuestionAnswerResponse[] | undefined;
    /** The participant land line number */
    landline?: string | undefined;
    /** The participants mobile telephone number */
    mobile?: string | undefined;

    constructor(data?: IHearingParticipantCheckListResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.hearing_id = data["hearing_id"];
            this.participant_id = data["participant_id"];
            this.title = data["title"];
            this.first_name = data["first_name"];
            this.last_name = data["last_name"];
            this.role = data["role"];
            this.completed_date = data["completed_date"] ? new Date(data["completed_date"].toString()) : <any>undefined;
            if (data["question_answer_responses"] && data["question_answer_responses"].constructor === Array) {
                this.question_answer_responses = [] as any;
                for (let item of data["question_answer_responses"])
                    this.question_answer_responses!.push(QuestionAnswerResponse.fromJS(item));
            }
            this.landline = data["landline"];
            this.mobile = data["mobile"];
        }
    }

    static fromJS(data: any): HearingParticipantCheckListResponse {
        data = typeof data === 'object' ? data : {};
        let result = new HearingParticipantCheckListResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["hearing_id"] = this.hearing_id;
        data["participant_id"] = this.participant_id;
        data["title"] = this.title;
        data["first_name"] = this.first_name;
        data["last_name"] = this.last_name;
        data["role"] = this.role;
        data["completed_date"] = this.completed_date ? this.completed_date.toISOString() : <any>undefined;
        if (this.question_answer_responses && this.question_answer_responses.constructor === Array) {
            data["question_answer_responses"] = [];
            for (let item of this.question_answer_responses)
                data["question_answer_responses"].push(item.toJSON());
        }
        data["landline"] = this.landline;
        data["mobile"] = this.mobile;
        return data; 
    }
}

/** A list of checklist answers for a given participant */
export interface IHearingParticipantCheckListResponse {
    /** Id of the hearing the checklist was answered for */
    hearing_id?: number | undefined;
    /** The unique participant id */
    participant_id?: number | undefined;
    /** Participant title */
    title?: string | undefined;
    /** The participants first name */
    first_name?: string | undefined;
    /** The participants last name */
    last_name?: string | undefined;
    /** The participants role in the system */
    role?: string | undefined;
    /** The date and time the checklist was submitted */
    completed_date?: Date | undefined;
    /** A list of checklist responses */
    question_answer_responses?: QuestionAnswerResponse[] | undefined;
    /** The participant land line number */
    landline?: string | undefined;
    /** The participants mobile telephone number */
    mobile?: string | undefined;
}

/** Checklist entry */
export class ChecklistsHearingResponse implements IChecklistsHearingResponse {
    /** Which hearing the checklist belongs to */
    hearing_id?: number | undefined;
    /** Which date and time the hearing is booked for */
    scheduled_date_time?: Date | undefined;
    /** The status of the hearing */
    status?: string | undefined;
    /** A list of case details for the given hearing */
    cases?: CaseResponse[] | undefined;

    constructor(data?: IChecklistsHearingResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.hearing_id = data["hearing_id"];
            this.scheduled_date_time = data["scheduled_date_time"] ? new Date(data["scheduled_date_time"].toString()) : <any>undefined;
            this.status = data["status"];
            if (data["cases"] && data["cases"].constructor === Array) {
                this.cases = [] as any;
                for (let item of data["cases"])
                    this.cases!.push(CaseResponse.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ChecklistsHearingResponse {
        data = typeof data === 'object' ? data : {};
        let result = new ChecklistsHearingResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["hearing_id"] = this.hearing_id;
        data["scheduled_date_time"] = this.scheduled_date_time ? this.scheduled_date_time.toISOString() : <any>undefined;
        data["status"] = this.status;
        if (this.cases && this.cases.constructor === Array) {
            data["cases"] = [];
            for (let item of this.cases)
                data["cases"].push(item.toJSON());
        }
        return data; 
    }
}

/** Checklist entry */
export interface IChecklistsHearingResponse {
    /** Which hearing the checklist belongs to */
    hearing_id?: number | undefined;
    /** Which date and time the hearing is booked for */
    scheduled_date_time?: Date | undefined;
    /** The status of the hearing */
    status?: string | undefined;
    /** A list of case details for the given hearing */
    cases?: CaseResponse[] | undefined;
}

/** A single checklist question response */
export class QuestionAnswerResponse implements IQuestionAnswerResponse {
    /** The unique key for the question answered */
    question_key?: string | undefined;
    /** The answer */
    answer?: string | undefined;
    /** Any additional text given to the answer */
    notes?: string | undefined;
    /** The date and time this specific question was answered */
    created_at?: Date | undefined;

    constructor(data?: IQuestionAnswerResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.question_key = data["question_key"];
            this.answer = data["answer"];
            this.notes = data["notes"];
            this.created_at = data["created_at"] ? new Date(data["created_at"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): QuestionAnswerResponse {
        data = typeof data === 'object' ? data : {};
        let result = new QuestionAnswerResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["question_key"] = this.question_key;
        data["answer"] = this.answer;
        data["notes"] = this.notes;
        data["created_at"] = this.created_at ? this.created_at.toISOString() : <any>undefined;
        return data; 
    }
}

/** A single checklist question response */
export interface IQuestionAnswerResponse {
    /** The unique key for the question answered */
    question_key?: string | undefined;
    /** The answer */
    answer?: string | undefined;
    /** Any additional text given to the answer */
    notes?: string | undefined;
    /** The date and time this specific question was answered */
    created_at?: Date | undefined;
}

/** Case details */
export class CaseResponse implements ICaseResponse {
    /** The case number */
    number?: string | undefined;
    /** The case name */
    name?: string | undefined;

    constructor(data?: ICaseResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.number = data["number"];
            this.name = data["name"];
        }
    }

    static fromJS(data: any): CaseResponse {
        data = typeof data === 'object' ? data : {};
        let result = new CaseResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["number"] = this.number;
        data["name"] = this.name;
        return data; 
    }
}

/** Case details */
export interface ICaseResponse {
    /** The case number */
    number?: string | undefined;
    /** The case name */
    name?: string | undefined;
}

export class ProblemDetails implements IProblemDetails {
    type?: string | undefined;
    title?: string | undefined;
    status?: number | undefined;
    detail?: string | undefined;
    instance?: string | undefined;

    constructor(data?: IProblemDetails) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.type = data["type"];
            this.title = data["title"];
            this.status = data["status"];
            this.detail = data["detail"];
            this.instance = data["instance"];
        }
    }

    static fromJS(data: any): ProblemDetails {
        data = typeof data === 'object' ? data : {};
        let result = new ProblemDetails();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["type"] = this.type;
        data["title"] = this.title;
        data["status"] = this.status;
        data["detail"] = this.detail;
        data["instance"] = this.instance;
        return data; 
    }
}

export interface IProblemDetails {
    type?: string | undefined;
    title?: string | undefined;
    status?: number | undefined;
    detail?: string | undefined;
    instance?: string | undefined;
}

/** Configuration to initialise the UI application */
export class ClientSettingsResponse implements IClientSettingsResponse {
    /** The Azure Tenant Id */
    tenant_id?: string | undefined;
    /** The UI Client Id */
    client_id?: string | undefined;
    /** The Uri to redirect back to after a successful login */
    redirect_uri?: string | undefined;
    /** The Uri to redirect back to after a successful logout */
    post_logout_redirect_uri?: string | undefined;
    /** The Application Insight Instrumentation Key */
    instrumentation_key?: string | undefined;

    constructor(data?: IClientSettingsResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.tenant_id = data["tenant_id"];
            this.client_id = data["client_id"];
            this.redirect_uri = data["redirect_uri"];
            this.post_logout_redirect_uri = data["post_logout_redirect_uri"];
            this.instrumentation_key = data["instrumentation_key"];
        }
    }

    static fromJS(data: any): ClientSettingsResponse {
        data = typeof data === 'object' ? data : {};
        let result = new ClientSettingsResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenant_id"] = this.tenant_id;
        data["client_id"] = this.client_id;
        data["redirect_uri"] = this.redirect_uri;
        data["post_logout_redirect_uri"] = this.post_logout_redirect_uri;
        data["instrumentation_key"] = this.instrumentation_key;
        return data; 
    }
}

/** Configuration to initialise the UI application */
export interface IClientSettingsResponse {
    /** The Azure Tenant Id */
    tenant_id?: string | undefined;
    /** The UI Client Id */
    client_id?: string | undefined;
    /** The Uri to redirect back to after a successful login */
    redirect_uri?: string | undefined;
    /** The Uri to redirect back to after a successful logout */
    post_logout_redirect_uri?: string | undefined;
    /** The Application Insight Instrumentation Key */
    instrumentation_key?: string | undefined;
}

export class BookNewHearingRequest implements IBookNewHearingRequest {
    scheduled_date_time?: Date | undefined;
    scheduled_duration?: number | undefined;
    hearing_venue_name?: string | undefined;
    case_type_name?: string | undefined;
    hearing_type_name?: string | undefined;
    cases?: CaseRequest[] | undefined;
    participants?: ParticipantRequest[] | undefined;
    hearing_room_name?: string | undefined;
    other_information?: string | undefined;
    created_by?: string | undefined;

    constructor(data?: IBookNewHearingRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.scheduled_date_time = data["scheduled_date_time"] ? new Date(data["scheduled_date_time"].toString()) : <any>undefined;
            this.scheduled_duration = data["scheduled_duration"];
            this.hearing_venue_name = data["hearing_venue_name"];
            this.case_type_name = data["case_type_name"];
            this.hearing_type_name = data["hearing_type_name"];
            if (data["cases"] && data["cases"].constructor === Array) {
                this.cases = [] as any;
                for (let item of data["cases"])
                    this.cases!.push(CaseRequest.fromJS(item));
            }
            if (data["participants"] && data["participants"].constructor === Array) {
                this.participants = [] as any;
                for (let item of data["participants"])
                    this.participants!.push(ParticipantRequest.fromJS(item));
            }
            this.hearing_room_name = data["hearing_room_name"];
            this.other_information = data["other_information"];
            this.created_by = data["created_by"];
        }
    }

    static fromJS(data: any): BookNewHearingRequest {
        data = typeof data === 'object' ? data : {};
        let result = new BookNewHearingRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["scheduled_date_time"] = this.scheduled_date_time ? this.scheduled_date_time.toISOString() : <any>undefined;
        data["scheduled_duration"] = this.scheduled_duration;
        data["hearing_venue_name"] = this.hearing_venue_name;
        data["case_type_name"] = this.case_type_name;
        data["hearing_type_name"] = this.hearing_type_name;
        if (this.cases && this.cases.constructor === Array) {
            data["cases"] = [];
            for (let item of this.cases)
                data["cases"].push(item.toJSON());
        }
        if (this.participants && this.participants.constructor === Array) {
            data["participants"] = [];
            for (let item of this.participants)
                data["participants"].push(item.toJSON());
        }
        data["hearing_room_name"] = this.hearing_room_name;
        data["other_information"] = this.other_information;
        data["created_by"] = this.created_by;
        return data; 
    }
}

export interface IBookNewHearingRequest {
    scheduled_date_time?: Date | undefined;
    scheduled_duration?: number | undefined;
    hearing_venue_name?: string | undefined;
    case_type_name?: string | undefined;
    hearing_type_name?: string | undefined;
    cases?: CaseRequest[] | undefined;
    participants?: ParticipantRequest[] | undefined;
    hearing_room_name?: string | undefined;
    other_information?: string | undefined;
    created_by?: string | undefined;
}

export class CaseRequest implements ICaseRequest {
    number?: string | undefined;
    name?: string | undefined;
    is_lead_case?: boolean | undefined;

    constructor(data?: ICaseRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.number = data["number"];
            this.name = data["name"];
            this.is_lead_case = data["is_lead_case"];
        }
    }

    static fromJS(data: any): CaseRequest {
        data = typeof data === 'object' ? data : {};
        let result = new CaseRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["number"] = this.number;
        data["name"] = this.name;
        data["is_lead_case"] = this.is_lead_case;
        return data; 
    }
}

export interface ICaseRequest {
    number?: string | undefined;
    name?: string | undefined;
    is_lead_case?: boolean | undefined;
}

export class ParticipantRequest implements IParticipantRequest {
    title?: string | undefined;
    first_name?: string | undefined;
    middle_names?: string | undefined;
    last_name?: string | undefined;
    contact_email?: string | undefined;
    telephone_number?: string | undefined;
    username?: string | undefined;
    display_name?: string | undefined;
    case_role_name?: string | undefined;
    hearing_role_name?: string | undefined;
    solicitors_reference?: string | undefined;
    representee?: string | undefined;
    house_number?: string | undefined;
    street?: string | undefined;
    postcode?: string | undefined;
    city?: string | undefined;
    county?: string | undefined;

    constructor(data?: IParticipantRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.title = data["title"];
            this.first_name = data["first_name"];
            this.middle_names = data["middle_names"];
            this.last_name = data["last_name"];
            this.contact_email = data["contact_email"];
            this.telephone_number = data["telephone_number"];
            this.username = data["username"];
            this.display_name = data["display_name"];
            this.case_role_name = data["case_role_name"];
            this.hearing_role_name = data["hearing_role_name"];
            this.solicitors_reference = data["solicitors_reference"];
            this.representee = data["representee"];
            this.house_number = data["house_number"];
            this.street = data["street"];
            this.postcode = data["postcode"];
            this.city = data["city"];
            this.county = data["county"];
        }
    }

    static fromJS(data: any): ParticipantRequest {
        data = typeof data === 'object' ? data : {};
        let result = new ParticipantRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["title"] = this.title;
        data["first_name"] = this.first_name;
        data["middle_names"] = this.middle_names;
        data["last_name"] = this.last_name;
        data["contact_email"] = this.contact_email;
        data["telephone_number"] = this.telephone_number;
        data["username"] = this.username;
        data["display_name"] = this.display_name;
        data["case_role_name"] = this.case_role_name;
        data["hearing_role_name"] = this.hearing_role_name;
        data["solicitors_reference"] = this.solicitors_reference;
        data["representee"] = this.representee;
        data["house_number"] = this.house_number;
        data["street"] = this.street;
        data["postcode"] = this.postcode;
        data["city"] = this.city;
        data["county"] = this.county;
        return data; 
    }
}

export interface IParticipantRequest {
    title?: string | undefined;
    first_name?: string | undefined;
    middle_names?: string | undefined;
    last_name?: string | undefined;
    contact_email?: string | undefined;
    telephone_number?: string | undefined;
    username?: string | undefined;
    display_name?: string | undefined;
    case_role_name?: string | undefined;
    hearing_role_name?: string | undefined;
    solicitors_reference?: string | undefined;
    representee?: string | undefined;
    house_number?: string | undefined;
    street?: string | undefined;
    postcode?: string | undefined;
    city?: string | undefined;
    county?: string | undefined;
}

export class HearingDetailsResponse implements IHearingDetailsResponse {
    id?: string | undefined;
    scheduled_date_time?: Date | undefined;
    scheduled_duration?: number | undefined;
    hearing_venue_name?: string | undefined;
    case_type_name?: string | undefined;
    hearing_type_name?: string | undefined;
    cases?: CaseResponse2[] | undefined;
    participants?: ParticipantResponse[] | undefined;
    hearing_room_name?: string | undefined;
    other_information?: string | undefined;
    created_date?: Date | undefined;
    created_by?: string | undefined;
    updated_by?: string | undefined;
    updated_date?: Date | undefined;
    status?: HearingDetailsResponseStatus | undefined;

    constructor(data?: IHearingDetailsResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.scheduled_date_time = data["scheduled_date_time"] ? new Date(data["scheduled_date_time"].toString()) : <any>undefined;
            this.scheduled_duration = data["scheduled_duration"];
            this.hearing_venue_name = data["hearing_venue_name"];
            this.case_type_name = data["case_type_name"];
            this.hearing_type_name = data["hearing_type_name"];
            if (data["cases"] && data["cases"].constructor === Array) {
                this.cases = [] as any;
                for (let item of data["cases"])
                    this.cases!.push(CaseResponse2.fromJS(item));
            }
            if (data["participants"] && data["participants"].constructor === Array) {
                this.participants = [] as any;
                for (let item of data["participants"])
                    this.participants!.push(ParticipantResponse.fromJS(item));
            }
            this.hearing_room_name = data["hearing_room_name"];
            this.other_information = data["other_information"];
            this.created_date = data["created_date"] ? new Date(data["created_date"].toString()) : <any>undefined;
            this.created_by = data["created_by"];
            this.updated_by = data["updated_by"];
            this.updated_date = data["updated_date"] ? new Date(data["updated_date"].toString()) : <any>undefined;
            this.status = data["status"];
        }
    }

    static fromJS(data: any): HearingDetailsResponse {
        data = typeof data === 'object' ? data : {};
        let result = new HearingDetailsResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["scheduled_date_time"] = this.scheduled_date_time ? this.scheduled_date_time.toISOString() : <any>undefined;
        data["scheduled_duration"] = this.scheduled_duration;
        data["hearing_venue_name"] = this.hearing_venue_name;
        data["case_type_name"] = this.case_type_name;
        data["hearing_type_name"] = this.hearing_type_name;
        if (this.cases && this.cases.constructor === Array) {
            data["cases"] = [];
            for (let item of this.cases)
                data["cases"].push(item.toJSON());
        }
        if (this.participants && this.participants.constructor === Array) {
            data["participants"] = [];
            for (let item of this.participants)
                data["participants"].push(item.toJSON());
        }
        data["hearing_room_name"] = this.hearing_room_name;
        data["other_information"] = this.other_information;
        data["created_date"] = this.created_date ? this.created_date.toISOString() : <any>undefined;
        data["created_by"] = this.created_by;
        data["updated_by"] = this.updated_by;
        data["updated_date"] = this.updated_date ? this.updated_date.toISOString() : <any>undefined;
        data["status"] = this.status;
        return data; 
    }
}

export interface IHearingDetailsResponse {
    id?: string | undefined;
    scheduled_date_time?: Date | undefined;
    scheduled_duration?: number | undefined;
    hearing_venue_name?: string | undefined;
    case_type_name?: string | undefined;
    hearing_type_name?: string | undefined;
    cases?: CaseResponse2[] | undefined;
    participants?: ParticipantResponse[] | undefined;
    hearing_room_name?: string | undefined;
    other_information?: string | undefined;
    created_date?: Date | undefined;
    created_by?: string | undefined;
    updated_by?: string | undefined;
    updated_date?: Date | undefined;
    status?: HearingDetailsResponseStatus | undefined;
}

export class CaseResponse2 implements ICaseResponse2 {
    number?: string | undefined;
    name?: string | undefined;
    is_lead_case?: boolean | undefined;

    constructor(data?: ICaseResponse2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.number = data["number"];
            this.name = data["name"];
            this.is_lead_case = data["is_lead_case"];
        }
    }

    static fromJS(data: any): CaseResponse2 {
        data = typeof data === 'object' ? data : {};
        let result = new CaseResponse2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["number"] = this.number;
        data["name"] = this.name;
        data["is_lead_case"] = this.is_lead_case;
        return data; 
    }
}

export interface ICaseResponse2 {
    number?: string | undefined;
    name?: string | undefined;
    is_lead_case?: boolean | undefined;
}

export class ParticipantResponse implements IParticipantResponse {
    id?: string | undefined;
    display_name?: string | undefined;
    case_role_name?: string | undefined;
    hearing_role_name?: string | undefined;
    user_role_name?: string | undefined;
    title?: string | undefined;
    first_name?: string | undefined;
    middle_names?: string | undefined;
    last_name?: string | undefined;
    contact_email?: string | undefined;
    telephone_number?: string | undefined;
    username?: string | undefined;
    house_number?: string | undefined;
    street?: string | undefined;
    postcode?: string | undefined;
    city?: string | undefined;
    county?: string | undefined;

    constructor(data?: IParticipantResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.display_name = data["display_name"];
            this.case_role_name = data["case_role_name"];
            this.hearing_role_name = data["hearing_role_name"];
            this.user_role_name = data["user_role_name"];
            this.title = data["title"];
            this.first_name = data["first_name"];
            this.middle_names = data["middle_names"];
            this.last_name = data["last_name"];
            this.contact_email = data["contact_email"];
            this.telephone_number = data["telephone_number"];
            this.username = data["username"];
            this.house_number = data["house_number"];
            this.street = data["street"];
            this.postcode = data["postcode"];
            this.city = data["city"];
            this.county = data["county"];
        }
    }

    static fromJS(data: any): ParticipantResponse {
        data = typeof data === 'object' ? data : {};
        let result = new ParticipantResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["display_name"] = this.display_name;
        data["case_role_name"] = this.case_role_name;
        data["hearing_role_name"] = this.hearing_role_name;
        data["user_role_name"] = this.user_role_name;
        data["title"] = this.title;
        data["first_name"] = this.first_name;
        data["middle_names"] = this.middle_names;
        data["last_name"] = this.last_name;
        data["contact_email"] = this.contact_email;
        data["telephone_number"] = this.telephone_number;
        data["username"] = this.username;
        data["house_number"] = this.house_number;
        data["street"] = this.street;
        data["postcode"] = this.postcode;
        data["city"] = this.city;
        data["county"] = this.county;
        return data; 
    }
}

export interface IParticipantResponse {
    id?: string | undefined;
    display_name?: string | undefined;
    case_role_name?: string | undefined;
    hearing_role_name?: string | undefined;
    user_role_name?: string | undefined;
    title?: string | undefined;
    first_name?: string | undefined;
    middle_names?: string | undefined;
    last_name?: string | undefined;
    contact_email?: string | undefined;
    telephone_number?: string | undefined;
    username?: string | undefined;
    house_number?: string | undefined;
    street?: string | undefined;
    postcode?: string | undefined;
    city?: string | undefined;
    county?: string | undefined;
}

export class BookingsResponse implements IBookingsResponse {
    hearings?: BookingsByDateResponse[] | undefined;
    next_cursor?: string | undefined;
    limit?: number | undefined;
    prev_page_url?: string | undefined;
    next_page_url?: string | undefined;

    constructor(data?: IBookingsResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["hearings"] && data["hearings"].constructor === Array) {
                this.hearings = [] as any;
                for (let item of data["hearings"])
                    this.hearings!.push(BookingsByDateResponse.fromJS(item));
            }
            this.next_cursor = data["next_cursor"];
            this.limit = data["limit"];
            this.prev_page_url = data["prev_page_url"];
            this.next_page_url = data["next_page_url"];
        }
    }

    static fromJS(data: any): BookingsResponse {
        data = typeof data === 'object' ? data : {};
        let result = new BookingsResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.hearings && this.hearings.constructor === Array) {
            data["hearings"] = [];
            for (let item of this.hearings)
                data["hearings"].push(item.toJSON());
        }
        data["next_cursor"] = this.next_cursor;
        data["limit"] = this.limit;
        data["prev_page_url"] = this.prev_page_url;
        data["next_page_url"] = this.next_page_url;
        return data; 
    }
}

export interface IBookingsResponse {
    hearings?: BookingsByDateResponse[] | undefined;
    next_cursor?: string | undefined;
    limit?: number | undefined;
    prev_page_url?: string | undefined;
    next_page_url?: string | undefined;
}

export class BookingsByDateResponse implements IBookingsByDateResponse {
    scheduled_date?: Date | undefined;
    hearings?: BookingsHearingResponse[] | undefined;

    constructor(data?: IBookingsByDateResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.scheduled_date = data["scheduled_date"] ? new Date(data["scheduled_date"].toString()) : <any>undefined;
            if (data["hearings"] && data["hearings"].constructor === Array) {
                this.hearings = [] as any;
                for (let item of data["hearings"])
                    this.hearings!.push(BookingsHearingResponse.fromJS(item));
            }
        }
    }

    static fromJS(data: any): BookingsByDateResponse {
        data = typeof data === 'object' ? data : {};
        let result = new BookingsByDateResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["scheduled_date"] = this.scheduled_date ? this.scheduled_date.toISOString() : <any>undefined;
        if (this.hearings && this.hearings.constructor === Array) {
            data["hearings"] = [];
            for (let item of this.hearings)
                data["hearings"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IBookingsByDateResponse {
    scheduled_date?: Date | undefined;
    hearings?: BookingsHearingResponse[] | undefined;
}

export class BookingsHearingResponse implements IBookingsHearingResponse {
    hearing_id?: string | undefined;
    hearing_number?: string | undefined;
    hearing_name?: string | undefined;
    scheduled_date_time?: Date | undefined;
    scheduled_duration?: number | undefined;
    case_type_name?: string | undefined;
    hearing_type_name?: string | undefined;
    court_room?: string | undefined;
    court_address?: string | undefined;
    judge_name?: string | undefined;
    created_by?: string | undefined;
    created_date?: Date | undefined;
    last_edit_by?: string | undefined;
    last_edit_date?: Date | undefined;
    hearing_date?: Date | undefined;
    status?: BookingsHearingResponseStatus | undefined;

    constructor(data?: IBookingsHearingResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.hearing_id = data["hearing_id"];
            this.hearing_number = data["hearing_number"];
            this.hearing_name = data["hearing_name"];
            this.scheduled_date_time = data["scheduled_date_time"] ? new Date(data["scheduled_date_time"].toString()) : <any>undefined;
            this.scheduled_duration = data["scheduled_duration"];
            this.case_type_name = data["case_type_name"];
            this.hearing_type_name = data["hearing_type_name"];
            this.court_room = data["court_room"];
            this.court_address = data["court_address"];
            this.judge_name = data["judge_name"];
            this.created_by = data["created_by"];
            this.created_date = data["created_date"] ? new Date(data["created_date"].toString()) : <any>undefined;
            this.last_edit_by = data["last_edit_by"];
            this.last_edit_date = data["last_edit_date"] ? new Date(data["last_edit_date"].toString()) : <any>undefined;
            this.hearing_date = data["hearing_date"] ? new Date(data["hearing_date"].toString()) : <any>undefined;
            this.status = data["status"];
        }
    }

    static fromJS(data: any): BookingsHearingResponse {
        data = typeof data === 'object' ? data : {};
        let result = new BookingsHearingResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["hearing_id"] = this.hearing_id;
        data["hearing_number"] = this.hearing_number;
        data["hearing_name"] = this.hearing_name;
        data["scheduled_date_time"] = this.scheduled_date_time ? this.scheduled_date_time.toISOString() : <any>undefined;
        data["scheduled_duration"] = this.scheduled_duration;
        data["case_type_name"] = this.case_type_name;
        data["hearing_type_name"] = this.hearing_type_name;
        data["court_room"] = this.court_room;
        data["court_address"] = this.court_address;
        data["judge_name"] = this.judge_name;
        data["created_by"] = this.created_by;
        data["created_date"] = this.created_date ? this.created_date.toISOString() : <any>undefined;
        data["last_edit_by"] = this.last_edit_by;
        data["last_edit_date"] = this.last_edit_date ? this.last_edit_date.toISOString() : <any>undefined;
        data["hearing_date"] = this.hearing_date ? this.hearing_date.toISOString() : <any>undefined;
        data["status"] = this.status;
        return data; 
    }
}

export interface IBookingsHearingResponse {
    hearing_id?: string | undefined;
    hearing_number?: string | undefined;
    hearing_name?: string | undefined;
    scheduled_date_time?: Date | undefined;
    scheduled_duration?: number | undefined;
    case_type_name?: string | undefined;
    hearing_type_name?: string | undefined;
    court_room?: string | undefined;
    court_address?: string | undefined;
    judge_name?: string | undefined;
    created_by?: string | undefined;
    created_date?: Date | undefined;
    last_edit_by?: string | undefined;
    last_edit_date?: Date | undefined;
    hearing_date?: Date | undefined;
    status?: BookingsHearingResponseStatus | undefined;
}

/** Request for updating an existing hearing */
export class EditHearingRequest implements IEditHearingRequest {
    /** The date and time for a hearing */
    scheduled_date_time?: Date | undefined;
    /** The duration of a hearing (number of minutes) */
    scheduled_duration?: number | undefined;
    /** The name of the hearing venue */
    hearing_venue_name?: string | undefined;
    /** The hearing room name at the hearing venue */
    hearing_room_name?: string | undefined;
    /** List of cases associated to the hearing */
    case?: EditCaseRequest | undefined;
    /** List of participants in hearing */
    participants?: EditParticipantRequest[] | undefined;
    /** Any other information about the hearing */
    other_information?: string | undefined;

    constructor(data?: IEditHearingRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.scheduled_date_time = data["scheduled_date_time"] ? new Date(data["scheduled_date_time"].toString()) : <any>undefined;
            this.scheduled_duration = data["scheduled_duration"];
            this.hearing_venue_name = data["hearing_venue_name"];
            this.hearing_room_name = data["hearing_room_name"];
            this.case = data["case"] ? EditCaseRequest.fromJS(data["case"]) : <any>undefined;
            if (data["participants"] && data["participants"].constructor === Array) {
                this.participants = [] as any;
                for (let item of data["participants"])
                    this.participants!.push(EditParticipantRequest.fromJS(item));
            }
            this.other_information = data["other_information"];
        }
    }

    static fromJS(data: any): EditHearingRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EditHearingRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["scheduled_date_time"] = this.scheduled_date_time ? this.scheduled_date_time.toISOString() : <any>undefined;
        data["scheduled_duration"] = this.scheduled_duration;
        data["hearing_venue_name"] = this.hearing_venue_name;
        data["hearing_room_name"] = this.hearing_room_name;
        data["case"] = this.case ? this.case.toJSON() : <any>undefined;
        if (this.participants && this.participants.constructor === Array) {
            data["participants"] = [];
            for (let item of this.participants)
                data["participants"].push(item.toJSON());
        }
        data["other_information"] = this.other_information;
        return data; 
    }
}

/** Request for updating an existing hearing */
export interface IEditHearingRequest {
    /** The date and time for a hearing */
    scheduled_date_time?: Date | undefined;
    /** The duration of a hearing (number of minutes) */
    scheduled_duration?: number | undefined;
    /** The name of the hearing venue */
    hearing_venue_name?: string | undefined;
    /** The hearing room name at the hearing venue */
    hearing_room_name?: string | undefined;
    /** List of cases associated to the hearing */
    case?: EditCaseRequest | undefined;
    /** List of participants in hearing */
    participants?: EditParticipantRequest[] | undefined;
    /** Any other information about the hearing */
    other_information?: string | undefined;
}

/** Case request */
export class EditCaseRequest implements IEditCaseRequest {
    /** The case number */
    number?: string | undefined;
    /** The case name */
    name?: string | undefined;

    constructor(data?: IEditCaseRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.number = data["number"];
            this.name = data["name"];
        }
    }

    static fromJS(data: any): EditCaseRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EditCaseRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["number"] = this.number;
        data["name"] = this.name;
        return data; 
    }
}

/** Case request */
export interface IEditCaseRequest {
    /** The case number */
    number?: string | undefined;
    /** The case name */
    name?: string | undefined;
}

/** Participant request */
export class EditParticipantRequest implements IEditParticipantRequest {
    /** Participant Id. */
    id?: string | undefined;
    /** Participant Title. */
    title?: string | undefined;
    /** Participant first name. */
    first_name?: string | undefined;
    /** Participant middle name. */
    middle_names?: string | undefined;
    /** Participant last name. */
    last_name?: string | undefined;
    /** Participant Contact Email */
    contact_email?: string | undefined;
    /** Participant Telephone number */
    telephone_number?: string | undefined;
    /** Participant Display Name */
    display_name?: string | undefined;
    /** The name of the participant's case role */
    case_role_name?: string | undefined;
    /** The name of the participant's hearing role */
    hearing_role_name?: string | undefined;
    /** The solicitor's reference for a participant */
    solicitors_reference?: string | undefined;
    /** The representee of a representative */
    representee?: string | undefined;
    /** House number of an Individual */
    house_number?: string | undefined;
    /** Stree number of an Individual */
    street?: string | undefined;
    /** Postcode of an Individual */
    postcode?: string | undefined;
    /** City/Town of an Individual */
    city?: string | undefined;
    /** County of an Individual */
    county?: string | undefined;
    /** Organisation name */
    organisation_name?: string | undefined;

    constructor(data?: IEditParticipantRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.title = data["title"];
            this.first_name = data["first_name"];
            this.middle_names = data["middle_names"];
            this.last_name = data["last_name"];
            this.contact_email = data["contact_email"];
            this.telephone_number = data["telephone_number"];
            this.display_name = data["display_name"];
            this.case_role_name = data["case_role_name"];
            this.hearing_role_name = data["hearing_role_name"];
            this.solicitors_reference = data["solicitors_reference"];
            this.representee = data["representee"];
            this.house_number = data["house_number"];
            this.street = data["street"];
            this.postcode = data["postcode"];
            this.city = data["city"];
            this.county = data["county"];
            this.organisation_name = data["organisation_name"];
        }
    }

    static fromJS(data: any): EditParticipantRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EditParticipantRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["title"] = this.title;
        data["first_name"] = this.first_name;
        data["middle_names"] = this.middle_names;
        data["last_name"] = this.last_name;
        data["contact_email"] = this.contact_email;
        data["telephone_number"] = this.telephone_number;
        data["display_name"] = this.display_name;
        data["case_role_name"] = this.case_role_name;
        data["hearing_role_name"] = this.hearing_role_name;
        data["solicitors_reference"] = this.solicitors_reference;
        data["representee"] = this.representee;
        data["house_number"] = this.house_number;
        data["street"] = this.street;
        data["postcode"] = this.postcode;
        data["city"] = this.city;
        data["county"] = this.county;
        data["organisation_name"] = this.organisation_name;
        return data; 
    }
}

/** Participant request */
export interface IEditParticipantRequest {
    /** Participant Id. */
    id?: string | undefined;
    /** Participant Title. */
    title?: string | undefined;
    /** Participant first name. */
    first_name?: string | undefined;
    /** Participant middle name. */
    middle_names?: string | undefined;
    /** Participant last name. */
    last_name?: string | undefined;
    /** Participant Contact Email */
    contact_email?: string | undefined;
    /** Participant Telephone number */
    telephone_number?: string | undefined;
    /** Participant Display Name */
    display_name?: string | undefined;
    /** The name of the participant's case role */
    case_role_name?: string | undefined;
    /** The name of the participant's hearing role */
    hearing_role_name?: string | undefined;
    /** The solicitor's reference for a participant */
    solicitors_reference?: string | undefined;
    /** The representee of a representative */
    representee?: string | undefined;
    /** House number of an Individual */
    house_number?: string | undefined;
    /** Stree number of an Individual */
    street?: string | undefined;
    /** Postcode of an Individual */
    postcode?: string | undefined;
    /** City/Town of an Individual */
    city?: string | undefined;
    /** County of an Individual */
    county?: string | undefined;
    /** Organisation name */
    organisation_name?: string | undefined;
}

export class UpdateBookingStatusRequest implements IUpdateBookingStatusRequest {
    updated_by?: string | undefined;
    status?: UpdateBookingStatusRequestStatus | undefined;

    constructor(data?: IUpdateBookingStatusRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.updated_by = data["updated_by"];
            this.status = data["status"];
        }
    }

    static fromJS(data: any): UpdateBookingStatusRequest {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateBookingStatusRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["updated_by"] = this.updated_by;
        data["status"] = this.status;
        return data; 
    }
}

export interface IUpdateBookingStatusRequest {
    updated_by?: string | undefined;
    status?: UpdateBookingStatusRequestStatus | undefined;
}

export class PersonResponse implements IPersonResponse {
    id?: string | undefined;
    title?: string | undefined;
    first_name?: string | undefined;
    middle_names?: string | undefined;
    last_name?: string | undefined;
    contact_email?: string | undefined;
    telephone_number?: string | undefined;
    username?: string | undefined;
    organisation?: string | undefined;
    house_number?: string | undefined;
    street?: string | undefined;
    postcode?: string | undefined;
    city?: string | undefined;
    county?: string | undefined;

    constructor(data?: IPersonResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.title = data["title"];
            this.first_name = data["first_name"];
            this.middle_names = data["middle_names"];
            this.last_name = data["last_name"];
            this.contact_email = data["contact_email"];
            this.telephone_number = data["telephone_number"];
            this.username = data["username"];
            this.organisation = data["organisation"];
            this.house_number = data["house_number"];
            this.street = data["street"];
            this.postcode = data["postcode"];
            this.city = data["city"];
            this.county = data["county"];
        }
    }

    static fromJS(data: any): PersonResponse {
        data = typeof data === 'object' ? data : {};
        let result = new PersonResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["title"] = this.title;
        data["first_name"] = this.first_name;
        data["middle_names"] = this.middle_names;
        data["last_name"] = this.last_name;
        data["contact_email"] = this.contact_email;
        data["telephone_number"] = this.telephone_number;
        data["username"] = this.username;
        data["organisation"] = this.organisation;
        data["house_number"] = this.house_number;
        data["street"] = this.street;
        data["postcode"] = this.postcode;
        data["city"] = this.city;
        data["county"] = this.county;
        return data; 
    }
}

export interface IPersonResponse {
    id?: string | undefined;
    title?: string | undefined;
    first_name?: string | undefined;
    middle_names?: string | undefined;
    last_name?: string | undefined;
    contact_email?: string | undefined;
    telephone_number?: string | undefined;
    username?: string | undefined;
    organisation?: string | undefined;
    house_number?: string | undefined;
    street?: string | undefined;
    postcode?: string | undefined;
    city?: string | undefined;
    county?: string | undefined;
}

/** Defines a type of hearing based on case */
export class HearingTypeResponse implements IHearingTypeResponse {
    /** The short code for the type */
    code?: string | undefined;
    /** Which case type it belongs to */
    group?: string | undefined;
    /** Unique identifier for this type of hearing */
    id?: number | undefined;
    /** Hearing type display name */
    name?: string | undefined;

    constructor(data?: IHearingTypeResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.code = data["code"];
            this.group = data["group"];
            this.id = data["id"];
            this.name = data["name"];
        }
    }

    static fromJS(data: any): HearingTypeResponse {
        data = typeof data === 'object' ? data : {};
        let result = new HearingTypeResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["code"] = this.code;
        data["group"] = this.group;
        data["id"] = this.id;
        data["name"] = this.name;
        return data; 
    }
}

/** Defines a type of hearing based on case */
export interface IHearingTypeResponse {
    /** The short code for the type */
    code?: string | undefined;
    /** Which case type it belongs to */
    group?: string | undefined;
    /** Unique identifier for this type of hearing */
    id?: number | undefined;
    /** Hearing type display name */
    name?: string | undefined;
}

/** Provides the case role and list of the associated hearing roles. */
export class CaseAndHearingRolesResponse implements ICaseAndHearingRolesResponse {
    /** Gets or sets the case role name. */
    name?: string | undefined;
    /** Gets or sets the associated hearing roles names. */
    hearing_roles?: string[] | undefined;

    constructor(data?: ICaseAndHearingRolesResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            if (data["hearing_roles"] && data["hearing_roles"].constructor === Array) {
                this.hearing_roles = [] as any;
                for (let item of data["hearing_roles"])
                    this.hearing_roles!.push(item);
            }
        }
    }

    static fromJS(data: any): CaseAndHearingRolesResponse {
        data = typeof data === 'object' ? data : {};
        let result = new CaseAndHearingRolesResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        if (this.hearing_roles && this.hearing_roles.constructor === Array) {
            data["hearing_roles"] = [];
            for (let item of this.hearing_roles)
                data["hearing_roles"].push(item);
        }
        return data; 
    }
}

/** Provides the case role and list of the associated hearing roles. */
export interface ICaseAndHearingRolesResponse {
    /** Gets or sets the case role name. */
    name?: string | undefined;
    /** Gets or sets the associated hearing roles names. */
    hearing_roles?: string[] | undefined;
}

export class HearingVenueResponse implements IHearingVenueResponse {
    id?: number | undefined;
    name?: string | undefined;

    constructor(data?: IHearingVenueResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
        }
    }

    static fromJS(data: any): HearingVenueResponse {
        data = typeof data === 'object' ? data : {};
        let result = new HearingVenueResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        return data; 
    }
}

export interface IHearingVenueResponse {
    id?: number | undefined;
    name?: string | undefined;
}

/** A judge existing in the system */
export class JudgeResponse implements IJudgeResponse {
    /** Judge first name */
    first_name?: string | undefined;
    /** Judge last name */
    last_name?: string | undefined;
    /** Judge display name as in the identity system */
    display_name?: string | undefined;
    /** Judge username/email */
    email?: string | undefined;

    constructor(data?: IJudgeResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.first_name = data["first_name"];
            this.last_name = data["last_name"];
            this.display_name = data["display_name"];
            this.email = data["email"];
        }
    }

    static fromJS(data: any): JudgeResponse {
        data = typeof data === 'object' ? data : {};
        let result = new JudgeResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["first_name"] = this.first_name;
        data["last_name"] = this.last_name;
        data["display_name"] = this.display_name;
        data["email"] = this.email;
        return data; 
    }
}

/** A judge existing in the system */
export interface IJudgeResponse {
    /** Judge first name */
    first_name?: string | undefined;
    /** Judge last name */
    last_name?: string | undefined;
    /** Judge display name as in the identity system */
    display_name?: string | undefined;
    /** Judge username/email */
    email?: string | undefined;
}

export class UserProfileResponse implements IUserProfileResponse {
    is_vh_officer_administrator_role?: boolean | undefined;
    is_case_administrator?: boolean | undefined;

    constructor(data?: IUserProfileResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.is_vh_officer_administrator_role = data["is_vh_officer_administrator_role"];
            this.is_case_administrator = data["is_case_administrator"];
        }
    }

    static fromJS(data: any): UserProfileResponse {
        data = typeof data === 'object' ? data : {};
        let result = new UserProfileResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["is_vh_officer_administrator_role"] = this.is_vh_officer_administrator_role;
        data["is_case_administrator"] = this.is_case_administrator;
        return data; 
    }
}

export interface IUserProfileResponse {
    is_vh_officer_administrator_role?: boolean | undefined;
    is_case_administrator?: boolean | undefined;
}

export enum HearingDetailsResponseStatus {
    Booked = "Booked", 
    Created = "Created", 
    Cancelled = "Cancelled", 
}

export enum BookingsHearingResponseStatus {
    Booked = "Booked", 
    Created = "Created", 
    Cancelled = "Cancelled", 
}

export enum UpdateBookingStatusRequestStatus {
    Created = "Created", 
    Cancelled = "Cancelled", 
}

export class SwaggerException extends Error {
    message: string;
    status: number; 
    response: string; 
    headers: { [key: string]: any; };
    result: any; 

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if(result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new SwaggerException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader(); 
            reader.onload = event => { 
                observer.next((<any>event.target).result);
                observer.complete();
            };
            reader.readAsText(blob); 
        }
    });
}